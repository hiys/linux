
[root@room9pc27 ~]# which  nm-connection-editor
/usr/bin/nm-connection-editor

[root@room9pc27 ~]# yum  provides  /usr/bin/nm-connection-editor 
...........
nm-connection-editor-1.8.0-3.el7.x86_64 : A network connection configuration
                                        : editor for NetworkManager
源    ：rhel7
匹配来源：
文件名    ：/usr/bin/nm-connection-editor

nm-connection-editor-1.8.0-3.el7.x86_64 : A network connection configuration
                                        : editor for NetworkManager
源    ：@anaconda
匹配来源：
文件名    ：/usr/bin/nm-connection-editor

[root@room9pc27 ~]# rpm  -q  nm-connection-editor 
nm-connection-editor-1.8.0-3.el7.x86_64
[root@room9pc27 ~]# 

[root@room9pc27 ~]# nm-connection-editor 
..............
[root@room9pc27 ~]# type  nm-connection-editor
nm-connection-editor 已被哈希 (/usr/bin/nm-connection-editor)


[root@V10 ~]# echo  'testcat' 
testcat
[root@V10 ~]# echo  'testcat'  |cat
testcat

--------------  直接在命令的最后指定 -  则表示从标准输入中读取 --------------
[root@V10 ~]# echo  'testcat'  |cat  -
testcat

[root@V10 ~]# echo  -e  "test1\ntest2bbb"  > test.txt
[root@V10 ~]# cat  test.txt
test1
test2bbb

[root@V10 ~]# echo  'testcat------'  |cat  - test.txt
testcat------
test1
test2bbb
[root@V10 ~]# echo  'testcat------'  |cat  test.txt  -
test1
test2bbb
testcat------
[root@V10 ~]# 

-----------  grep会同时处理标准输入和文件test.txt中的内容，
也就是说会在标准输入中搜索 'at' 
也会在文件 test.txt (该文件名从grep命令行参数中获得)中搜索 'at'

[root@V10 ~]# echo  'testcat------'  |grep  "at"  test.txt  -
(标准输入):testcat------
[root@V10 ~]# echo  'testcat------'  |grep  "bb"  test.txt  -
test.txt:test2bbb

xargs命令可以通过管道接受字符串，
并将接收到的字符串通过 空格 分割成 许多参数
(默认情况下是通过空格分割) 然后将参数传递给其后面的命令，
作为后面命令的命令行参数

echo '--help' | xargs cat 等价于 cat --help 

[root@V10 ~]# echo '--help' | xargs cat
用法：cat [选项]... [文件]...
将[文件]或标准输入组合输出到标准输出。

  -A, --show-all           等于-vET
  -b, --number-nonblank    对非空输出行编号
  -e                       等于-vE
  -E, --show-ends          在每行结束处显示"$"
  -n, --number             对输出的所有行编号
...............
------ xargs将其接受的字符串 --help 做成cat的一个命令参数来 运行cat命令

[root@V10 ~]# type   xargs
xargs 已被哈希 (/usr/bin/xargs)

[root@V10 ~]# cat  test.txt
test1
test2bbb
[root@V10 ~]# echo  test.txt  |xargs  cat
test1
test2bbb
[root@V10 ~]# echo  test.txt  |xargs  grep  bb
test2bbb
-------------  注意" {}   \; " 空格 -------------
[root@V10 ~]# find  ./  -name  "test*" -type  f  -exec  ls  {}\;
find: 遗漏“-exec”的参数
[root@V10 ~]# find  ./  -name  "test*" -type  f  -exec  ls  {} \;
./test.txt

find命令如果不加-print0其搜索结果的每一条字符串后面实际上是加了换行
默认情况下find的输出结果是每条记录后面加上换行，也就是每条记录是一个新行
[root@V10 ~]# find  ./  -name  "test*" -type  f  
./test.txt
./test2.txt

## -0 选项表示以 '\0' 为分隔符，一般与find结合使用,# 注意是数字"0"零print0

[root@V10 ~]# find  ./  -name  "test*" -type  f  -print0 # 注意是数字"0"零print0
./test.txt./test2.txt[root@V10 ~]# 
-----------  加上 -print0 参数表示find输出的每条结果后面加上 '\0' 而不是换行 ----------

[root@V10 ~]# 

-----------  xargs 使用 -d 命令指定分隔符  ---------------

[root@V10 ~]# echo "haha\0xixi\0hehe"
haha\0xixi\0hehe
[root@V10 ~]# echo  -e  "haha\0xixi\0hehe"
hahaxixihehe
[root@V10 ~]# echo  -e  "haha\0xixi\0hehe" |xargs  -d  "\0"  echo
haha xixi hehe

[root@V10 ~]# echo  -e  "haha\0xixi\0hehe" |xargs  -0  echo
haha xixi hehe
--------------- xargs的 -0 和 -d '\0' 表示其从标准输入中读取的内容使用 '\0' 来分割，
由于 find 的结果是使用 '\0' 分隔的，所以xargs使用 '\0' 将 find的结果分隔之后得到
haha xixi hehe

------------ 目录下的所有文件中查找字符串 --------------------

[root@V10 ~]# find ./  |xargs   grep  "2bb"
grep: ./: 是一个目录
grep: ./.cache: 是一个目录
grep: ./.cache/dconf: 是一个目录
..............
grep: ./.local/share/webkitgtk/localstorage: 是一个目录
grep: ./.ssh: 是一个目录
./test.txt:test2bbb
./test2.txt:test2bbb
[root@V10 ~]#  

------------ 目录下的所有文件中查找字符串 ------------------- 

[root@V10 ~]# find ./  |xargs   grep  -ri  "2bb"
./test.txt:test2bbb
./test2.txt:test2bbb
grep: ./.cache/yelp/WebKitCache/Version: 没有那个文件或目录
grep: 10: 没有那个文件或目录
grep: ./.cache/yelp/WebKitCache/Version: 没有那个文件或目录
grep: 10/Blobs: 没有那个文件或目录
./test.txt:test2bbb
./test2.txt:test2bbb
[root@V10 ~]# 

----------- 目录下的所有文件中查找字符串,并且只打印出含有该字符串的文件名 -------------

[root@V10 ~]# find ./  |xargs   grep  -lri  "2bb"
./test.txt
./test2.txt
grep: ./.cache/yelp/WebKitCache/Version: 没有那个文件或目录
grep: 10: 没有那个文件或目录
grep: ./.cache/yelp/WebKitCache/Version: 没有那个文件或目录
grep: 10/Blobs: 没有那个文件或目录
./test.txt
./test2.txt

表示在 当前目录 ./ 下面搜索
并且 列出文件内容中包含 2bb 字符串的文件名，并且是递归的搜索

参数说明：
-l 列出文件名称
-r递归的搜索
-i 不区分大小写搜索


--------  配置文件 
/etc/httpd/conf/httpd.conf 系统自带，管理员配置 

[root@room9pc27 ~]# tail   -2  /etc/httpd/conf/httpd.conf
# Load config files in the "/etc/httpd/conf.d" directory, if any.
   在“/etc/httpd/conf.d”目录中加载配置文件（如果有）
IncludeOptional conf.d/*.conf

[root@room9pc27 ~]# ls  /etc/httpd/
conf  conf.d  conf.modules.d  logs  modules  run

[root@room9pc27 ~]# ls  /etc/httpd/conf.d/
00-aa.conf  autoindex.conf  README  rhce.conf  userdir.conf  welcome.conf

[root@room9pc27 ~]# ll /etc/httpd/conf.d/rhce.conf 
lrwxrwxrwx 1 root root 40 3月  19 2018 /etc/httpd/conf.d/rhce.conf -> /var/lib/libvirt/images/conf.d/rhce.conf

[root@room9pc27 ~]# cat  /etc/httpd/conf.d/rhce.conf 
Alias  /exam	/var/www/exam

[root@room9pc27 ~]# ll /var/lib/libvirt/images/conf.d/rhce.conf 
-rw-r--r-- 1 root root 27 1月  10 2018 /var/lib/libvirt/images/conf.d/rhce.conf

[root@room9pc27 ~]# cat   /var/lib/libvirt/images/conf.d/rhce.conf
Alias  /exam	/var/www/exam

[root@room9pc27 ~]# firefox  http://127.0.0.1/exam

[root@room9pc27 ~]# find   /etc/httpd/  |xargs  grep   -lri  "/var/www/exam"
/etc/httpd/conf.d/rhce.conf

[root@room9pc27 ~]# find   /etc/httpd/  |xargs  grep   -lri  "exam"
/etc/httpd/conf/httpd.conf
/etc/httpd/conf.d/userdir.conf
/etc/httpd/conf/httpd.conf
/etc/httpd/conf/httpd.conf
.................
/etc/httpd/conf.d/userdir.conf
/etc/httpd/conf.d/userdir.conf
/etc/httpd/conf.d/rhce.conf
[root@room9pc27 ~]# 

[root@room9pc27 ~]# ls  /var/www/
cgi-bin  exam  html
[root@room9pc27 ~]# ls  /var/www/exam/
ex200  ex300  index.html  rht-ex300.desktop

[root@room9pc27 ~]# ls  /var/www/exam/ex200/
.................
[root@room9pc27 ~]# ls  /var/www/exam/ex300/
................

[root@room9pc27 ~]# tail  -2  /etc/profile
unset -f pathmunge
/bin/uftpd -D /public

[root@room9pc27 ~]# tail  -3  /etc/bashrc 
# vim:ts=4:sw=4
/usr/sbin/ifconfig rhce:0 172.25.0.250
echo Taren1 | passwd --stdin root &> /dev/null

[root@room9pc27 ~]# lsattr   /etc/bashrc
----i--------e-- /etc/bashrc

chattr命令的用法：
chattr [ -RVf ] [ -v version ] [ mode ] files…
最关键的是在[mode]部分，
[mode]部分是由 + - = 和 [ASacDdIijsTtu] 这些字符 组合的，
这部分是用来控制文件的属性。

+ ：在原有参数设定基础上，追加参数。
- ：在原有参数设定基础上，移除参数。
= ：更新为指定参数设定。
A：文件或目录的 atime (access time)不可被修改(modified), 
可以有效预防例如手提电脑磁盘I/O错误的发生。

S：硬盘I/O同步选项，功能类似sync,文件内容变更后立即同步到硬盘(sync)。

a：即append，设定该参数后，只能向文件中添加数据，而不能删除，
多用于服务器日志文件安全，只有root才能设定这个属性。

i：设定文件不能被删除、改名、设定链接关系，同时不能写入或新增内容。
  i参数对于文件 系统的安全设置有很大帮助。
  i是更为严格的安全设定，只有superuser (root) 
  或具有CAP_LINUX_IMMUTABLE处理能力（标识）的进程能够施加该选项。
  i若对目录设置后 则仅能修改 子文件 而不能 新建或删除。

j：即journal，设定此参数使得当通过mount参数：data=ordered 或者 data=writeback 挂 载的文件系统，文件在写入时会先被记录(在journal中)。
如果filesystem被设定参数为 data=journal，则该参数自动失效。

 ------------ 显示(目录的)文件系统属性 这些文件 设置了“e”属性，即可执行   ----

[root@room9pc27 ~]# lsattr   testsed.txt 
-------------e-- testsed.txt

[root@room9pc27 ~]# chattr  -i  /etc/bashrc

[root@room9pc27 ~]# lsattr   /etc/bashrc
-------------e-- /etc/bashrc

[root@room9pc27 ~]# vim   /etc/bashrc
[root@room9pc27 ~]# tail   -1  /etc/bashrc
echo 1 | passwd --stdin root &> /dev/null

[root@room9pc27 ~]# . /etc/bashrc
[root@room9pc27 ~]# echo  $?
0
[root@room9pc27 ~]# ll  /etc/bashrc
-rw-r--r-- 1 root root 2934 2月  13 10:12 /etc/bashrc

[root@room9pc27 ~]# vim  .bash_history
[root@room9pc27 ~]# > .bash_history

[root@room9pc27 ~]# ll .bash_history
-rw------- 1 root root 0 2月  13 10:33 .bash_history
[root@room9pc27 ~]# lsattr  .bash_history
-------------e-- .bash_history
[root@room9pc27 ~]# history  -c
[root@room9pc27 ~]# history  -w
[root@room9pc27 ~]# history 
    1  history  -w
    2  history 


POSIX标准
  POSIX（Portable Operating System Interface for Computing Systems）
是由IEEE 和ISO/IEC 开发的一簇标准。
该标准是基于现有的UNIX 实践和经验，描述了操作系统的调用服务接口。

查找 Linux 系统中的僵尸进程
#!/bin/bash 
#awk 判断 ps 命令输出的第 8 列为 Z 是,显示该进程的 PID 和进程命令 
ps aux |awk '{if($8 == "Z"){print $2,$11}}' 

Shell 脚本的 fork 炸弹
#!/bin/bash 
#快速消耗计算机资源,致使计算机死机 
#定义函数名为.(点), 函数中递归调用自己并放入后台执行 
.() { .|.& };. 

生成自签名私钥和证书
#!/bin/bash 
#Author:丁丁历险(Jacob) 
read ‐p "请输入存放证书的目录:" dir 
if [ ! ‐d $dir ];then 
  echo "该目录不存在" 
  exit 
fi 
read ‐p "请输入密钥名称:" name 
#使用 openssl 生成私钥 
openssl genrsa ‐out ${dir}/${name}.key 

#使用 openssl 生成证书 

#subj 选项可以在生成证书时,非交互自动填写 Common Name 信息 
openssl req ‐new ‐x509 ‐key ${dir}/${name}.key ‐subj "/CN=common" ‐out ${dir}/${name}.crt 

=================
generate key

创建EC参数和私钥文件 #使用 openssl 生成私钥 
openssl ecparam -genkey -name prime256v1 -out attestation_key.pem

#使用 openssl 生成私钥 
openssl genrsa ‐out ${dir}/${name}.key 


查看EC私钥 
openssl ecparam -in attestation_key.pem -text

验证EC参数 
openssl ecparam -in attestation_key.pem -check

self-signed certificate

创建公钥证书 
openssl req -new -sha256 -key attestation_key.pem -out csr.csr -subj “/C=CN/ST=Shanghai/O=WhoAreYou/CN=WAY\ Fingerprint\ U2F\ Authenticator”

自签发公钥证书至attestation.pem 
openssl req -config opnssl.cnf -x509 -sha256 -days 3650 -key attestation_key.pem -in csr.csr -out attestation.pem

convert to der

openssl x509 -outform der -in attestation.pem -out attestation.der 
openssl ec -in attestation_key.pem -outform der -out attestation_key.der

generate C code

python dump-der.py > certificates.c || ( rm certificates.c && exit 1 )

gen.sh

#!/bin/bash

set -e

cat > opnssl.cnf <<EOF
[req]
distinguished_name = req_distinguished_name
[req_distinguished_name]
EOF

# generate key and self-signed certificate
openssl ecparam -genkey -name prime256v1 -out attestation_key.pem
openssl req -new -sha256 -key attestation_key.pem -out csr.csr -subj "/CN=U2F Token"
openssl req -config opnssl.cnf -x509 -sha256 -days 3650 -key attestation_key.pem -in csr.csr -out attestation.pem

# convert to der
openssl x509 -outform der -in attestation.pem -out attestation.der
openssl ec -in attestation_key.pem -outform der -out attestation_key.der

# generate C code
python dump-der.py > certificates.c || ( rm certificates.c && exit 1 )

dump-der.py

from __future__ import print_function
from asn1crypto.keys import ECPrivateKey

def pk_to_c_array(name, pk_der):
    # parse der format
    pk = ECPrivateKey.load(pk_der)

    # extract private key
    pk_native = pk['private_key'].native

    # translate to hex string
    pk_hex = format(pk_native, '064x')

    # split by pairs of characters
    hex_bytes = ["0x" + pk_hex[i:i + 2] for i in range(0, len(pk_hex), 2)]

    # make string C array declaration
    return "const uint8_t " + name + "[32] = {" + ", ".join(hex_bytes) + "};"

def cert_to_c_array(name, der):
    defname = name.upper() + "_LEN"
    if hasattr(der, 'hex'):
        hex_str = der.hex()
    else:
        hex_str = der.encode('hex')
    hex_bytes = ["0x" + hex_str[i:i + 2] for i in range(0, len(hex_str), 2)]

    define = "#define " + defname + " " + str(len(der))
    array = "const uint8_t " + name + "[" + defname + "] = {" + ", ".join(hex_bytes) + "};"
    return define + "\n" + array

with open("attestation.der", "rb") as f:
    print(cert_to_c_array("attestation_der", f.read()))

with open("attestation_key.der", "rb") as f:
    print(pk_to_c_array("attestation_key", f.read()))
--------------------- 
======================
[root@server0 ~]# tail  -2   /etc/fstab
UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1  /    xfs   defaults   1   1
/dev/systemvg/vo   /vo      ext4          defaults   0    0
设备路径              挂载点  此分区的文件系统类型  参数     备份标记  检测顺序
第五列是dump备份设置。
当其值设置 为  1  时，
将允许dump备份程序备份；
设置 为  0  时，忽略备份操作；

第六列是fsck磁盘检查设置。
其值是一个顺序。 
当其值为 0 时，永远不检查；
而 / 根目录分区永远都为1。
其它分区从2开始，
数字越小 优先 检查，
如果两个分区的数字相同，则同时检查。



[root@room9pc27 ~]# mkdir  /var/git/hiys/
[root@room9pc27 ~]# cd  /var/git/hiys/
[root@room9pc27 hiys]# git clone  https://github.com/hiys/Cloud_linux
正克隆到 'Cloud_linux'...
.......
接收对象中: 100% (1190/1190), 121.66 MiB | 732.00 KiB/s, done.
处理 delta 中: 100% (484/484), done.

[root@room9pc27 linux]# cd  /var/git/linux/linux/

[root@room9pc27 linux]#  pwd
/var/git/linux/linux

如果想拿远端git服务器上的最新版本(或某个特定版本)覆盖本地的修改,可以使用git pull命令
[root@room9pc27 linux]# git  pull   #更新本地git仓库

remote: Enumerating objects: 6, done.
remote: Counting objects: 100% (6/6), done.
remote: Compressing objects: 100% (5/5), done.
remote: Total 43 (delta 1), reused 1 (delta 1), pack-reused 37
Unpacking objects: 100% (43/43), done.
.............

[root@room9pc27 Cloud_linux]# pwd
/var/git/hiys/Cloud_linux

[root@room9pc27 Cloud_linux]# find  ./  |xargs   grep  -lri  "redis"
./nsd1807/exper/mysql.txt
./nsd1807/exper/haproxy.cfg
./Architecture/elk02.txt
./docker/dockerbj01.txt
./docker/Openstack_end-4.txt
./docker/Openstack_end-5.txt
./CLOUD_architecture_Project/docker/dockerbj01.txt


[root@room9pc27 Cloud_linux]# cd    /var/git/linux/linux/
[root@room9pc27 linux]# find  ./  |xargs   grep  -lri  "redis"
./config/config_global_default.php
./5747732-dzone-rc43-scalabilityandhighavailability.pdf
./lnmp_soft/php_scripts/Discuz_X3.4_SC_UTF8.zip
./lnmp_soft/redis-3.0.6.tar.gz
./Architecture/elk02.txt
./Architecture/CLoud/dockerbj01.txt
./CLoud/cloudbj5-1.txt
./CLoud/cloudbj5.txt
./CLoud/cloudbj4-2.txt
./redis/redis.zip
./cluster/Ceph%2CTFS%2CFastDFS%2CMogileFS%2CMooseFS%2CGlusterFS+对比+-+yswenli+-+博客园.pdf
./cluster/clusterbj3.txt
./NOSQL/nosql_day01.txt
./NOSQL/nosqlbj2.txt
./NOSQL/nosqlbj3.txt

./DBa2/master_ip_failover2.txt
./DBa2/master_ip_failover.txt
./DBa2/dba2bj3.txt

https://github.com/hiys/linux/blob/master/NOSQL/nosql_day01.txt




[root@room9pc27 ~]# virsh  help
分组的命令：

 Domain Management (help keyword 'domain'):
    attach-device                  从一个XML文件附加装置
    attach-disk                    附加磁盘设备
    attach-interface               获得网络界面
    autostart                      自动开始一个域
..............
    console                        连接到客户会话
...............
    create                         从一个 XML 文件创建一个域
    define                         从一个 XML 文件定义（但不开始）一个域
    desc                           显示或者设定域描述或者标题
    destroy                        销毁（停止）域
    detach-device                  从一个 XML 文件分离设备
    detach-disk                    分离磁盘设备
    detach-interface               分离网络界面
    domdisplay                     域显示连接 URI
    domfsfreeze                    Freeze domain's mounted filesystems.
    domfsthaw                      Thaw domain's mounted filesystems.
    domfsinfo                      Get information of domain's mounted filesystems.
    domfstrim                      在域挂载的文件系统中调用 fstrim。
    domhostname                    输出域主机名
    domid                          把一个域名或 UUID 转换为域 id
    domif-setlink                  设定虚拟接口的链接状态
    domiftune                      获取/设定虚拟接口参数
    domjobabort                    忽略活跃域任务
    domjobinfo                     域任务信息
    domname                        将域 id 或 UUID 转换为域名
    domrename                      rename a domain
    dompmsuspend                   使用电源管理功能挂起域
    dompmwakeup                    从 pmsuspended 状态唤醒域
    domuuid                        把一个域名或 id 转换为域 UUID
    domxml-from-native             将原始配置转换为域 XML
    domxml-to-native               将域 XML 转换为原始配置
    dump                           把一个域的内核 dump 到一个文件中以方便分析
    dumpxml                        XML 中的域信息
    edit                           编辑某个域的 XML 配置
    event                          Domain Events
    inject-nmi                     在虚拟机中输入 NMI
    iothreadinfo                   view domain IOThreads
    iothreadpin                    control domain IOThread affinity
    iothreadadd                    add an IOThread to the guest domain
    iothreaddel                    delete an IOThread from the guest domain
    send-key                       向虚拟机发送序列号
    send-process-signal            向进程发送信号
    lxc-enter-namespace            LXC 虚拟机进入名称空间
    managedsave                    管理域状态的保存
    managedsave-remove             删除域的管理保存
    memtune                        获取或者数值内存参数
    perf                           Get or set perf event
    metadata                       show or set domain's custom XML metadata
    migrate                        将域迁移到另一个主机中
    migrate-setmaxdowntime         设定最大可耐受故障时间
    migrate-compcache              获取/设定压缩缓存大小
    migrate-setspeed               设定迁移带宽的最大值
    migrate-getspeed               获取最长迁移带宽
    migrate-postcopy               Switch running migration from pre-copy to post-copy
    numatune                       获取或者数值 numa 参数
    qemu-attach                    QEMU 附加
    qemu-monitor-command           QEMU 监控程序命令
    qemu-monitor-event             QEMU Monitor Events
    qemu-agent-command             QEMU 虚拟机代理命令
    reboot                         重新启动一个域
    reset                          重新设定域
    restore                        从一个存在一个文件中的状态恢复一个域
    resume                         重新恢复一个域
    save                           把一个域的状态保存到一个文件
    save-image-define              为域的保存状态文件重新定义 XML
    save-image-dumpxml             在 XML 中保存状态域信息
    save-image-edit                为域保存状态文件编辑 XML
    schedinfo                      显示/设置日程安排变量
    screenshot                     提取当前域控制台快照并保存到文件中
    set-user-password              set the user password inside the domain
    setmaxmem                      改变最大内存限制值
    setmem                         改变内存的分配
    setvcpus                       改变虚拟 CPU 的号
    shutdown                       关闭一个域
    start                          开始一个（以前定义的）非活跃的域
    suspend                        挂起一个域
    ttyconsole                     tty 控制台
    undefine                       取消定义一个域
    update-device                  从 XML 文件中关系设备
    vcpucount                      域 vcpu 计数
    vcpuinfo                       详细的域 vcpu 信息
    vcpupin                        控制或者查询域 vcpu 亲和性
    emulatorpin                    控制火车查询域模拟器亲和性
    vncdisplay                     vnc 显示
    guestvcpus                     query or modify state of vcpu in the guest (via agent)
    setvcpu                        attach/detach vcpu or groups of threads
    domblkthreshold                set the threshold for block-threshold event for a given block device or it's backing chain element

 Domain Monitoring (help keyword 'monitor'):
    domblkerror                    在块设备中显示错误
    domblkinfo                     域块设备大小信息
    domblklist                     列出所有域块
    domblkstat                     获得域设备块状态
    domcontrol                     域控制接口状态
    domif-getlink                  获取虚拟接口链接状态
    domifaddr                      Get network interfaces' addresses for a running domain
    domiflist                      列出所有域虚拟接口
    domifstat                      获得域网络接口状态
    dominfo                        域信息
    dommemstat                     获取域的内存统计
    domstate                       域状态
    domstats                       get statistics about one or multiple domains
    domtime                        domain time
    list                           列出域

 Host and Hypervisor (help keyword 'host'):
    allocpages                     Manipulate pages pool size
    capabilities                   性能
    cpu-models                     CPU models
    domcapabilities                domain capabilities
    freecell                       NUMA可用内存
    freepages                      NUMA free pages
    hostname                       打印管理程序主机名
    maxvcpus                       连接 vcpu 最大值
    node-memory-tune               获取或者设定节点内存参数
    nodecpumap                     节点 cpu 映射
    nodecpustats                   输出节点的 cpu 状统计数据。
    nodeinfo                       节点信息
    nodememstats                   输出节点的内存状统计数据。
    nodesuspend                    在给定时间段挂起主机节点
    sysinfo                        输出 hypervisor sysinfo
    uri                            打印管理程序典型的URI
    version                        显示版本

 Interface (help keyword 'interface'):
    iface-begin                    生成当前接口设置快照，可在今后用于提交 (iface-commit) 或者恢复 (iface-rollback)
    iface-bridge                   生成桥接设备并为其附加一个现有网络设备
    iface-commit                   提交 iface-begin 后的更改并释放恢复点
    iface-define                   define an inactive persistent physical host interface or modify an existing persistent one from an XML file
    iface-destroy                  删除物理主机接口（启用它请执行 "if-down"）
    iface-dumpxml                  XML 中的接口信息
    iface-edit                     为物理主机界面编辑 XML 配置
    iface-list                     物理主机接口列表
    iface-mac                      将接口名称转换为接口 MAC 地址
    iface-name                     将接口 MAC 地址转换为接口名称
    iface-rollback                 恢复到之前保存的使用 iface-begin 生成的更改
    iface-start                    启动物理主机接口（启用它请执行 "if-up"）
    iface-unbridge                 分离其辅助设备后取消定义桥接设备
    iface-undefine                 取消定义物理主机接口（从配置中删除）

 Network Filter (help keyword 'filter'):
    nwfilter-define                使用 XML 文件定义或者更新网络过滤器
    nwfilter-dumpxml               XML 中的网络过滤器信息
    nwfilter-edit                  为网络过滤器编辑 XML 配置
    nwfilter-list                  列出网络过滤器
    nwfilter-undefine              取消定义网络过滤器

 Networking (help keyword 'network'):
    net-autostart                  自动开始网络
    net-create                     从一个 XML 文件创建一个网络
    net-define                     define an inactive persistent virtual network or modify an existing persistent one from an XML file
    net-destroy                    销毁（停止）网络
    net-dhcp-leases                print lease info for a given network
    net-dumpxml                    XML 中的网络信息
    net-edit                       为网络编辑 XML 配置
    net-event                      Network Events
    net-info                       网络信息
    net-list                       列出网络
    net-name                       把一个网络UUID 转换为网络名
    net-start                      开始一个(以前定义的)不活跃的网络
    net-undefine                   undefine a persistent network
    net-update                     更新现有网络配置的部分
    net-uuid                       把一个网络名转换为网络UUID

 Node Device (help keyword 'nodedev'):
    nodedev-create                 根据节点中的 XML 文件定义生成设备
    nodedev-destroy                销毁（停止）节点中的设备
    nodedev-detach                 将节点设备与其设备驱动程序分离
    nodedev-dumpxml                XML 中的节点设备详情
    nodedev-list                   这台主机中中的枚举设备
    nodedev-reattach               重新将节点设备附加到他的设备驱动程序中
    nodedev-reset                  重置节点设备
    nodedev-event                  Node Device Events

 Secret (help keyword 'secret'):
    secret-define                  定义或者修改 XML 中的 secret
    secret-dumpxml                 XML 中的 secret 属性
    secret-event                   Secret Events
    secret-get-value               secret 值输出
    secret-list                    列出 secret
    secret-set-value               设定 secret 值
    secret-undefine                取消定义 secret

 Snapshot (help keyword 'snapshot'):
    snapshot-create                使用 XML 生成快照
    snapshot-create-as             使用一组参数生成快照
    snapshot-current               获取或者设定当前快照
    snapshot-delete                删除域快照
    snapshot-dumpxml               为域快照转储 XML
    snapshot-edit                  编辑快照 XML
    snapshot-info                  快照信息
    snapshot-list                  为域列出快照
    snapshot-parent                获取快照的上级快照名称
    snapshot-revert                将域转换为快照

 Storage Pool (help keyword 'pool'):
    find-storage-pool-sources-as   找到潜在存储池源
    find-storage-pool-sources      发现潜在存储池源
    pool-autostart                 自动启动某个池
    pool-build                     建立池
    pool-create-as                 从一组变量中创建一个池
    pool-create                    从一个 XML 文件中创建一个池
    pool-define-as                 在一组变量中定义池
    pool-define                    define an inactive persistent storage pool or modify an existing persistent one from an XML file
    pool-delete                    删除池
    pool-destroy                   销毁（删除）池
    pool-dumpxml                   XML 中的池信息
    pool-edit                      为存储池编辑 XML 配置
    pool-info                      存储池信息
    pool-list                      列出池
    pool-name                      将池 UUID 转换为池名称
    pool-refresh                   刷新池
    pool-start                     启动一个（以前定义的）非活跃的池
    pool-undefine                  取消定义一个不活跃的池
    pool-uuid                      把一个池名称转换为池 UUID
    pool-event                     Storage Pool Events

 Storage Volume (help keyword 'volume'):
    vol-clone                      克隆卷。
    vol-create-as                  从一组变量中创建卷
    vol-create                     从一个 XML 文件创建一个卷
    vol-create-from                生成卷，使用另一个卷作为输入。
    vol-delete                     删除卷
    vol-download                   将卷内容下载到文件中
    vol-dumpxml                    XML 中的卷信息
    vol-info                       存储卷信息
    vol-key                        为给定密钥或者路径返回卷密钥
    vol-list                       列出卷
    vol-name                       为给定密钥或者路径返回卷名
    vol-path                       为给定密钥或者路径返回卷路径
    vol-pool                       为给定密钥或者路径返回存储池
    vol-resize                     创新定义卷大小
    vol-upload                     将文件内容上传到卷中
    vol-wipe                       擦除卷

 Virsh itself (help keyword 'virsh'):
    cd                             更改当前目录
    echo                           echo 参数
    exit                           退出这个非交互式终端
    help                           打印帮助
    pwd                            输出当前目录
    quit                           退出这个非交互式终端
    connect                        连接（重新连接）到 hypervisor


[root@room9pc27 ~]# 













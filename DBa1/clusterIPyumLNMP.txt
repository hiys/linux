if [ $a -eq 1 -a $b -eq 1]----------# -a 并且      -o 或者  shell语言--------------]
private1:   inet 192.168.4  .254  --eth0
private2:   inet 192.168.2  .254  --eth1
public1:    inet 201.1  .1  .254  --eth2
public2:    inet 201.1  .2  .254  --eth3

[root@room9pc01 ~]# tail -1 /etc/fstab 
/var/lib/libvirt/images/iso/rhel-server-7.4-x86_64-dvd.iso  /var/ftp/rhel7 iso9660 defaults 0 0
[root@room9pc01 ~]# ls /var/ftp/rhel7/
............
EULA              isolinux  repodata
..............
[root@room9pc01 ~]# systemctl is-active vsftpd
active
[root@room9pc01 ~]# ls /etc/yum.repos.d/
packagekit-media.repo  rhel7.repo
[root@room9pc01 ~]# cat /etc/yum.repos.d/rhel7.repo 
[rhel7]
name=rhel7.4
enabled=1
baseurl=file:///var/ftp/rhel7
gpgcheck=0
[root@room9pc01 ~]# yum clean all  >/dev/null && yum repolist |tail -3
源标识                               源名称                                状态
rhel7                                rhel7.4                               4,986
repolist: 4,986
[root@room9pc01 ~]# rpm -q expect 
expect-5.45-14.el7_1.x86_64

[root@room9pc01 ~]# vim VMname-hostname-eth0-eth1-eth2-eth3-rpmtarzip.txt

[root@room9pc01 ~]# cat  VMname-hostname-eth0-eth1-eth2-eth3-rpmtarzip.txt 
rh7_node1:VMa10:VMb10:Host10:4.10:2.10:1.1.10:1.2.10:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
rh7_node2:VMa11:VMb11:Host11:4.11:2.11:1.1.11:1.2.11:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
rh7_node3:VMa12:VMb12:Host12:4.12:2.12:1.1.12:1.2.12:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
[root@room9pc01 ~]# awk -F: '{print NR,NF}' /root/VMname-hostname-eth0-eth1-eth2-eth3-rpmtarzip.txt
1 12
2 12
3 12
[root@room9pc01 ~]# for i in `cat /root/VMname-hostname-eth0-eth1-eth2-eth3-rpmtarzip.txt`; do echo $i;done;
rh7_node1:VMa10:VMb10:Host10:4.10:2.10:1.1.10:1.2.10:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
rh7_node2:VMa11:VMb11:Host11:4.11:2.11:1.1.11:1.2.11:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
rh7_node3:VMa12:VMb12:Host12:4.12:2.12:1.1.12:1.2.12:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
[root@room9pc01 ~]# echo $i |awk -F: '{print $1}'
rh7_node3
[root@room9pc01 ~]# echo $i |awk -F: '{print $2}'
VMa12
[root@room9pc01 ~]# echo $i |awk -F: '{print $3}'
VMb12
[root@room9pc01 ~]# echo $i |awk -F: '{print $4}'
Host12
[root@room9pc01 ~]# echo $i |awk -F: '{print $5}'
4.12
[root@room9pc01 ~]# echo $i |awk -F: '{print $6}'
2.12
[root@room9pc01 ~]# echo $i |awk -F: '{print $7}'
1.1.12
[root@room9pc01 ~]# echo $i |awk -F: '{print $8}'
1.2.12
[root@room9pc01 ~]# echo $i |awk -F: '{print $9}'
/root/桌面/lnmp_soft.tar.gz
[root@room9pc01 ~]# echo $i |awk -F: '{print $10}'
/root/桌面/Cobbler.zip
[root@room9pc01 ~]# echo $i |awk -F: '{print $11}'
/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm
[root@room9pc01 ~]# echo $i |awk -F: '{print $12}'
lnmp.sh
[root@room9pc01 ~]# echo $i |awk -F: '{print $NF}'
lnmp.sh
[root@room9pc01 ~]# echo $i
rh7_node3:VMa12:VMb12:Host12:4.12:2.12:1.1.12:1.2.12:/root/桌面/lnmp_soft.tar.gz:/root/桌面/Cobbler.zip:/root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm:lnmp.sh
[root@room9pc01 ~]# VMname=$(echo $i |awk -F: '{print $1}');echo $VMname
rh7_node3
[root@room9pc01 ~]# VMnameA=$(echo $i |awk -F: '{print $2}');echo $VMnameA
VMa12
[root@room9pc01 ~]# VMnameB=$(echo $i |awk -F: '{print $3}');echo $VMnameB
VMb12
[root@room9pc01 ~]# hostname=$(echo $i |awk -F: '{print $4}');echo $hostname
Host12
[root@room9pc01 ~]# eth0=$(echo $i |awk -F: '{print $5}');echo $eth0
4.12
[root@room9pc01 ~]# eth1=$(echo $i |awk -F: '{print $6}');echo $eth1
2.12
[root@room9pc01 ~]# eth2=$(echo $i |awk -F: '{print $7}');echo $eth2
1.1.12
[root@room9pc01 ~]# eth3=$(echo $i |awk -F: '{print $8}');echo $eth3
1.2.12
[root@room9pc01 ~]# file=$(echo $i |awk -F: '{print $9,$10,$11,$12}');echo $file
/root/桌面/lnmp_soft.tar.gz /root/桌面/Cobbler.zip /root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm lnmp.sh
[root@room9pc01 ~]# 

[root@room9pc01 ~]# vim cluster
[root@room9pc01 ~]# cat cluster
#!/bin/bash
password=123456;
for i in `cat /root/VMname-hostname-eth0-eth1-eth2-eth3-rpmtarzip.txt`
do 
  VMname=$(echo $i |awk -F: '{print $1}');
  echo $VMname;
  hostname=$(echo $i |awk -F: '{print $4}');  
  echo $hostname;
  eth0=$(echo $i |awk -F: '{print $5}');
  echo "192.168.$eth0";
  eth1=$(echo $i |awk -F: '{print $6}');
  echo "192.168.$eth1";
  eth2=$(echo $i |awk -F: '{print $7}');
  echo "201.$eth2";
  eth3=$(echo $i |awk -F: '{print $8}');
  echo "201.$eth3";

  file=$(echo $i |awk -F: '{print $9,$10,$11,$12}');
  echo $file;

  function  newVMnameA(){
   VMnameA=$(echo $i |awk -F: '{print $2}');
  }
  function  newVMnameB(){
   VMnameB=$(echo $i |awk -F: '{print $3}');
  }
  ipexp(){
    expect  /root/clone.sh
    if [ $? -eq 0 -o $? -eq 1 ];then
      virsh start $VMname;
    else
      echo "clone failed";
      exit;
    fi
  }
  case $1 in
  clone)
    ipexp  &
    wait  %  $i;;
  startA)
    virsh start  $VMname;
    if [ $? -ne 0 ];then
     newVMnameA
     virsh start $VMnameA;
    fi;;
  startB)
    virsh start  $VMname;
    if [ $? -ne 0 ];then
     newVMnameB
     virsh start $VMnameB;
    fi;;
  stopA)
    virsh shutdown $VMname;
    if [ $? -ne 0 ];then
     newVMnameA
     virsh shutdown $VMnameA;
    fi;;
  stopB)
    virsh shutdown $VMname;
    if [ $? -ne 0 ];then
     newVMnameB
     virsh shutdown $VMnameB;
    fi;;
  *)
    echo "input-Error";;
  esac
done
echo  "Amazing !"
[root@room9pc01 ~]# 

[root@room9pc01 ~]# cat clone.sh 
#!/usr/bin/expect  -f
set timeout  -1
spawn clone-auto7
expect "vms:"   {send "1\r"}
expect "#"  {send "echo Clone successfully\r"}
expect "#"  {send "\r"}
[root@room9pc01 ~]# 

转到/etc/libvirt/qemu  目录下对原来的虚拟机配置进行导出
[root@room9pc01 ~]# ls /var/lib/libvirt/images/
bin      exam        rh7_node1.img   server.qcow2                vsftpd.conf
conf.d   iso         rh7_node2.img   Student.sh                  Weekend.sh
content  lost+found  rh7_node3.img   tedu-wallpaper-01.png
db       qemu        server-1.qcow2  tedu-wallpaper-weekend.png

[root@room9pc01 ~]# ls /etc/libvirt/qemu/
networks  rh7_node1.xml  rh7_node2.xml  rh7_node3.xml

[root@room9pc01 ~]# 转到/etc/libvirt/qemu  目录下对原来的虚拟机配置进行导出
[root@room9pc01 ~]# cd /etc/libvirt/qemu/
[root@room9pc01 qemu]# virsh dumpxml  rh7_node1 >VMa10.xml
[root@room9pc01 qemu]# virsh dumpxml  rh7_node2 >VMa11.xml

[root@room9pc01 qemu]# virsh dumpxml  rh7_node3 >VMa12.xml

[root@room9pc01 qemu]# pwd
/etc/libvirt/qemu
[root@room9pc01 qemu]# ls
networks  rh7_node1.xml  rh7_node2.xml  rh7_node3.xml  VMa10.xml  VMa11.xml  VMa12.xml
-----------------------------------------导出之后我们需要将虚拟机的文件修改一下
[root@room9pc01 qemu]# vim VMa10.xml 
<domain type='kvm'>
  <name>VMa10</name>
[root@room9pc01 qemu]# sed -n  '/<name>VMa10</name>/p' VMa10.xml
sed：-e 表达式 #1，字符 16：命令后含有多余的字符
\ $ * + ( )
去除其特殊含义，仅表示字面含义（字符串），
就要在前面加转义符 \ 转义。
写为 \\, \$, \*, \+, \(, \)。
[root@room9pc01 qemu]# sed -n  '/<name>VMa10<\/name>/p' VMa10.xml 
  <name>VMa10</name>
[root@room9pc01 qemu]# 
-------------------------------------------------使用virsh undefine 命令将之前的虚拟机删除
[root@room9pc01 qemu]# virsh undefine  rh7_node1
域 rh7_node1 已经被取消定义
[root@room9pc01 qemu]# ls   ##rh7_node1 已经被删除
networks  rh7_node2.xml  rh7_node3.xml  VMa10.xml  VMa11.xml  VMa12.xml
[root@room9pc01 qemu]# ls /var/lib/libvirt/images/
bin      exam        rh7_node1.img   server.qcow2                vsftpd.conf
conf.d   iso         rh7_node2.img   Student.sh                  Weekend.sh
content  lost+found  rh7_node3.img   tedu-wallpaper-01.png
db       qemu        server-1.qcow2  tedu-wallpaper-weekend.png
[root@room9pc01 qemu]# 
使用virsh define 命令将重新定义新的虚拟机
[root@room9pc01 qemu]# virsh define VMa10.xml 
定义域 VMa10（从 VMa10.xml）

[root@room9pc01 qemu]# ls
networks  rh7_node2.xml  rh7_node3.xml  VMa10.xml  VMa11.xml  VMa12.xml

[root@room9pc01 qemu]# pwd
/etc/libvirt/qemu
[root@room9pc01 qemu]# virsh list --all
 Id    名称                         状态
----------------------------------------------------
 -     rh7_node2                      关闭
 -     rh7_node3                      关闭
 -     VMa10                          关闭

[root@room9pc01 qemu]# 
[root@room9pc01 qemu]# sed -n '/<name>/p' VMa11.xml 
  <name>rh7_node2</name>
[root@room9pc01 qemu]# sed -n 's/rh7_node2/VMa11/p' VMa11.xml #注意 -n 's/... '也会修改内容,特殊点
  <name>VMa11</name>
      <source file='/var/lib/libvirt/images/VMa11.img'/>
------------------------------导出之后我们需要将虚拟机的文件修改一下
[root@room9pc01 qemu]# sed -i 's/rh7_node2/VMa11/p' VMa11.xml
[root@room9pc01 qemu]# sed -n '/VMa11/p' VMa11.xml
  <name>VMa11</name>
  <name>VMa11</name>
      <source file='/var/lib/libvirt/images/VMa11.img'/>
      <source file='/var/lib/libvirt/images/VMa11.img'/>
[root@room9pc01 qemu]# sed -n 's/rh7_node3/VMa12/p' VMa12.xml 
  <name>VMa12</name>
      <source file='/var/lib/libvirt/images/VMa12.img'/>

---------------------------------导出之后我们需要将虚拟机的文件修改一下
[root@room9pc01 qemu]# sed -i 's/rh7_node3/VMa12/p' VMa12.xml 
[root@room9pc01 qemu]# vim VMa12.xml
[root@room9pc01 qemu]# sed -n '/VMa12/p' VMa12.xml 
  <name>VMa12</name>
      <source file='/var/lib/libvirt/images/VMa12.img'/>
      <source file='/var/lib/libvirt/images/VMa12.img'/>
[root@room9pc01 qemu]# vim VMa12.xml
--------------------------------使用virsh undefine 命令将之前的虚拟机删除
[root@room9pc01 qemu]# virsh undefine  rh7_node2
域 rh7_node2 已经被取消定义

[root@room9pc01 qemu]# virsh undefine  rh7_node3
域 rh7_node3 已经被取消定义

[root@room9pc01 qemu]# ls
networks  VMa10.xml  VMa11.xml  VMa12.xml
[root@room9pc01 qemu]# 
-------------------------------------使用virsh define 命令将重新定义新的虚拟机
[root@room9pc01 qemu]# ls
networks  VMa10.xml  VMa11.xml  VMa12.xml
[root@room9pc01 qemu]# virsh define VMa11.xml
定义域 VMa11（从 VMa11.xml）

[root@room9pc01 qemu]# virsh define VMa12.xml
定义域 VMa12（从 VMa12.xml）

[root@room9pc01 qemu]# ls
networks  VMa10.xml  VMa11.xml  VMa12.xml
[root@room9pc01 qemu]# ls /var/lib/libvirt/images/
bin      exam        rh7_node1.img   server.qcow2                vsftpd.conf
conf.d   iso         rh7_node2.img   Student.sh                  Weekend.sh
content  lost+found  rh7_node3.img   tedu-wallpaper-01.png
db       qemu        server-1.qcow2  tedu-wallpaper-weekend.png
[root@room9pc01 qemu]# ls /var/lib/libvirt/images/qemu/
networks  win2008.xml
[root@room9pc01 qemu]# ls /var/lib/libvirt/images/qemu/networks/
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml
[root@room9pc01 qemu]# ls /var/lib/libvirt/images/qemu/networks/autostart/
private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml
[root@room9pc01 qemu]# 
[root@room9pc01 qemu]# pwd
/etc/libvirt/qemu
[root@room9pc01 qemu]# 配置出错
[root@room9pc01 ~]# ls /var/lib/libvirt/images/
bin      db    lost+found     rh7_node3.img   Student.sh                  vsftpd.conf
conf.d   exam  qemu           server-1.qcow2  tedu-wallpaper-01.png       Weekend.sh
content  iso   rh7_node2.img  server.qcow2    tedu-wallpaper-weekend.png
[root@room9pc01 ~]# ls /etc/libvirt/qemu/
networks
[root@room9pc01 ~]# 
/***********************************************
[root@room9pc01 ~]# ls /var/lib/libvirt/images/
bin      exam        rh7_node1.img  rh7_node5.img   tedu-wallpaper-01.png
conf.d   iso         rh7_node2.img  server-1.qcow2  tedu-wallpaper-weekend.png
content  lost+found  rh7_node3.img  server.qcow2    vsftpd.conf
db       qemu        rh7_node4.img  Student.sh      Weekend.sh
[root@room9pc01 ~]# ls /var/lib/libvirt/images/rh7_node2.img 
/var/lib/libvirt/images/rh7_node2.img
[root@room9pc01 ~]# rm -f  /var/lib/libvirt/images/rh7_node2.img  #猜想的解决办法
[root@room9pc01 ~]# rm -f  /var/lib/libvirt/images/rh7_node3.img  #手动删除镜像
[root@room9pc01 ~]# ls /var/lib/libvirt/images/
bin      db    lost+found      server.qcow2           tedu-wallpaper-weekend.png
conf.d   exam  qemu            Student.sh             vsftpd.conf
content  iso   server-1.qcow2  tedu-wallpaper-01.png  Weekend.sh
[root@room9pc01 ~]# ls /etc/libvirt/qemu/
networks
[root@room9pc01 ~]# . cluster  clone
rh7_node1
Host10
192.168.4.10
192.168.2.10
201.1.1.10
201.1.2.10
/root/桌面/lnmp_soft.tar.gz /root/桌面/Cobbler.zip /root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm lnmp.sh
spawn clone-auto7
number of vms: 1
created rh7_node1	

[root@room9pc01 ~]# ls /etc/libvirt/qemu/
networks  rh7_node1.xml  rh7_node2.xml  rh7_node3.xml
[root@room9pc01 ~]# ls /var/lib/libvirt/images/
bin      exam        rh7_node1.img   server.qcow2                vsftpd.conf
conf.d   iso         rh7_node2.img   Student.sh                  Weekend.sh
content  lost+found  rh7_node3.img   tedu-wallpaper-01.png
db       qemu        server-1.qcow2  tedu-wallpaper-weekend.png
[root@room9pc01 ~]# 



[root@room9pc01 ~]# cat txt.sh 
#!/bin/bash
while : 
do
read -p "请输入你要克隆的虚拟机编号：" i
read -p "请输入你要设置的IP：" address
read -p "请输入你要设置的主机名：" hostname
echo "$i" | clone-vm7
vm=rh7_node$i
if [ $i -lt 10 ];then
vm=rh7_node0$i
fi
virsh  start    $vm
sleep 5
expect  <<EOF
spawn virsh  console  $vm 
expect "]"        {send "\r"}
expect "login:"  {send "root\r"}
expect "："      {send "123456\r"}
expect "#"       {send "nmcli connection modify eth0 ipv4.method manual ipv4.addresses $address/24 connection.autoconnect yes\r"}
expect "#"       {send "nmcli connection up eth0\r"}
expect "#"       {send "hostnamectl  set-hostname $hostname\r"}
expect "#"       {send "wget ftp://192.168.4.254/pub/yum.sh   -O  /root/yum.sh\r"}
expect "#"       {send "chmod  +x /root/yum.sh \r"}
expect "#"       {send "bash /root/yum.sh \r"}
expect "#"       {send "exit\r"}
EOF
echo
done
[root@room9pc01 ~]# 

[root@room9pc01 ~]# cat yum.sh 
#!/bin/bash
rm -rf /etc/yum.repos.d/*.repo
echo "[yum]
name=yum
baseurl=ftp://192.168.4.254/rhel7
enabled=1
gpgcheck=0" > /etc/yum.repos.d/rhel.repo
systemctl stop firewalld
setenforce 0


[root@room9pc01 ~]# VMname=rh7_node$i
[root@room9pc01 ~]# vim ip.txt
[root@room9pc01 ~]# cat ip.txt
10
11
12
13
14
[root@room9pc01 ~]# for i in `cat /root/ip.txt`;do  rr=$i;echo $rr;done;
10
11
12
13
14
[root@room9pc01 ~]# vim host.txt
[root@room9pc01 ~]# cat host.txt
Client
Proxy
Web1
Web2
Web3
[root@room9pc01 ~]# for j in `cat /root/host.txt`;do host=$j;echo $host;done;
Client
Proxy
Web1
Web2
Web3
[root@room9pc01 ~]# 


=====================cluster   1 ===============================

[root@room9pc01 ~]# cat cluster
#!/bin/bash
password=123456;
for i in `seq 8`
do 
  hostn=rh7_node$i;
  systn=H1$[i-1];
  let eth0=9+$i;
  eth1=$eth0;
  function  newhostn(){
    hostn=Host1$[i-1];
  }
  function  newhostnH(){
    hostn=H1$[i-1];
  }
  ipexp(){
    expect  /root/clone.sh
    if [ $? -eq 0 -o $? -eq 1 ];then
      virsh start $hostn;
    else
      echo "clone failed";
      exit;
    fi
    expect /root/console.sh $hostn $password  $systn $eth0 $eth1
    if [ $? -eq 0 -o $? -eq 1 ];then
      echo "ipyum well done";
    else
      echo  "ipyum failed";
    fi
  }
  case $1 in
  clone)
    ipexp  &
    wait  %  $i;;
  start)
    virsh start  $hostn;
    if [ $? -ne 0 ];then
     newhostn
     virsh start $hostn;
    fi;;
  startH)
    virsh start  $hostn;
    if [ $? -ne 0 ];then
     newhostnH
     virsh start $hostn;
    fi;;
  stop)
    virsh shutdown $hostn;
    if [ $? -ne 0 ];then
     newhostn
     virsh shutdown $hostn;
    fi;;
  stopH)
    virsh shutdown $hostn;
    if [ $? -ne 0 ];then
     newhostnH
     virsh shutdown $hostn;
    fi;;
  scp)
     expect /root/autoscp.sh  $eth0
     if [ $? -eq 0 -o $? -eq 1 ];then
       echo "scp is over";
     else
       echo  "scp failed";
    fi;;
  setlnmp)
    expect  /root/setlnmp.sh  $eth0
     if [ $? -eq 0 -o $? -eq 1 ];then
       echo "setting up lnmp  well done";
     else
       echo  "setting up failed";
    fi;;    
  *)
    echo "input-Error";;
  esac
done
echo  "Amazing !"
[root@room9pc01 ~]# 
=======================clone.sh  2======================
[root@room9pc01 ~]# cat clone.sh 
#!/usr/bin/expect  -f
set timeout  -1
spawn clone-auto7
expect "vms:"   {send "1\r"}
expect "#"  {send "echo Clone successfully\r"}
expect "#"  {send "\r"}
[root@room9pc01 ~]# 
==================console.sh  3=================
[root@room9pc01 ~]# cat console.sh 
#!/usr/bin/expect  -f
set  timeout  -1
set hostn     [lindex  $argv  0]
set password  [lindex  $argv  1]
set systn     [lindex  $argv  2]
set eth0      [lindex  $argv  3]
set eth1      [lindex  $argv  4]
spawn  virsh  console  $hostn
expect "换码符为 ^]"  {send "\n"}
expect "login:"   {send "root\r"}
expect "密码："     {send "$password\r"}
expect "#"  {send "echo 123 |passwd  --stdin root\r"}
expect "#"  {send "echo $systn >/etc/hostname\r"}
expect "#"  {send "nmcli connection modify eth0 ipv4.method manual ipv4.addresses 192.168.4.$eth0/24  ipv4.gateway 192.168.4.254 connection.autoconnect yes \r"}
expect "#"  {send "nmcli connection up eth0 \r"}
expect "#"  {send "nmcli connection add con-name eth1 ifname eth1 type ethernet autoconnect yes\r"}
expect "#"  {send "nmcli connection modify eth1 ipv4.method manual ipv4.addresses 192.168.2.$eth1/24  ipv4.gateway 192.168.2.254 connection.autoconnect yes \r"} 
expect "#"  {send "nmcli connection up eth1 \r"}
expect "#"  {send "ifconfig | grep 'inet '\r"}
expect "#"  {send "echo '\[rhel7\]
\nname=rhel7.4
\nenabled=1
\ngpgcheck=0
\nbaseurl=ftp://192.168.4.254/rhel7
\n\[rhel7-2\]
\nname=rhel7.4-2
\nbaseurl=ftp://192.168.2.254/rhel7
\ngpgcheck=0
\nenabled=1 '>/etc/yum.repos.d/rhel7.repo\r"}
expect "#"  {send "yum clean all >/dev/null && yum repolist |tail -4\r"}
expect "#"  {send "systemctl isolate graphical\r"}
expect "#"  {send "sleep 5 && date\r"}
expect "#"  {send "\r"}
[root@room9pc01 ~]# 
=================autoscp.sh  4==========================
[root@room9pc01 ~]# cat autoscp.sh 
#!/usr/bin/expect  -f
set timeout  -1
set eth0    [lindex $argv 0]
spawn  scp  -o  StrictHostKeyChecking=no  /root/lnmp.sh  /root/桌面/Discuz_X3.3_SC_UTF8.zip  /root/桌面/s3cmd-2.0.1-1.el7.noarch.rpm   /root/桌面/lnmp_soft.tar.gz  root@192.168.4.$eth0:/root/
expect "password:"  {send  "123\r"}
expect "#"  {send  "send date\r"}
expect "#"  {send  "\r"}
[root@room9pc01 ~]# 
====================lnmp.sh  5========================================
[root@room9pc01 ~]# cat lnmp.sh 
#!/bin/bash
ss -anputl |grep nginx 
if [ $? -ne 0 ];then
 nginx
 if [ $? -eq 0 ];then
  echo "nginx has already been installed";
 else
  echo "nginx will be installed";
  tar -xzf /root/lnmp_soft.tar.gz;
  if [ $? -eq 0 ];then
    echo "tar lnmp_soft.tar.gz  has completed";
  else
    echo "tar lnmp_soft.tar.gz  Error!";
    exit;
  fi
  yum -y install  httpd elinks telnet httpd-tools  gcc pcre-devel openssl-devel mariadb-devel mariadb-server  mariadb memcached php-pecl-memcache php php-mysql zlib-devel /root/lnmp_soft/php-fpm-5.4.16-42.el7.x86_64.rpm ;
  if [ $? -eq 0 ];then
    echo "yum install has completed";
  else
    echo "yum install Error!";
    exit;
  fi
  sleep 5 && date;
  rpm -q  elinks telnet httpd-tools gcc  pcre-devel openssl-devel mariadb-devel mariadb mariadb-server memcached php-pecl-memcache  php php-mysql php-fpm zlib-devel ;
  nginx -s stop;
  rm  -rf /usr/local/nginx;
  useradd -s /sbin/nologin nginx;
  if [ $? -eq 0 ];then
    echo "user nginx is added";
  else
    echo "user nginx  already exist !";
  fi
  tar -xzf /root/lnmp_soft/nginx-1.12.2.tar.gz;
  if [ $? -eq 0 ];then
    echo "tar nginx-1.12.2.tar.gz  has completed";
  else
    echo "tar nginx-1.12.2.tar.gz Error!";
    exit;
  fi
  cd nginx-1.12.2/;ls
  ./configure  --prefix=/usr/local/nginx  --user=nginx  --group=nginx --with-http_ssl_module  --with-stream  --with-http_stub_status_module  --without-http_autoindex_module  --without-http_ssi_module ;
  sleep 5 && date
  make && make install
#  echo 'export PATH=/usr/local/nginx/sbin/:$PATH' >>/etc/profile;
#  source /etc/profile;
#  which nginx;
  ln -s /usr/local/nginx/sbin/nginx /sbin/
  ls -l  /sbin/nginx
  nginx
  if [ $? -eq 0 ];then
    echo "nginx startup successfully!";
  else
    echo "nginx startup failed !";
    exit;
  fi
  systemctl start mariadb && systemctl enable mariadb
  systemctl start php-fpm && systemctl enable php-fpm
  systemctl start memcached && systemctl enable memcached
  if [ $? -eq 0 ];then
    echo "memcached is active and enabled ";
  else
    echo "Service memcached startup failed!";
    exit;
  fi
  nginx -V
  ss -anptul |egrep ':80|3306|:9000|:11211'
  echo "nginx is setting up";
 fi
else
  echo "`ifconfig |awk '/inet /{print $2}' |sed -n 1p` nginx is active"
fi
echo "[mon]
name=mon
baseurl=ftp://192.168.4.254/ceph/rhceph-2.0-rhel-7-x86_64/MON/
gpgcheck=0
enabled=1
[osd]
name=osd
baseurl=ftp://192.168.4.254/ceph/rhceph-2.0-rhel-7-x86_64/OSD/
gpgcheck=0
enabled=1
[tools]
name=tools
baseurl=ftp://192.168.4.254/ceph/rhceph-2.0-rhel-7-x86_64/Tools/
gpgcheck=0
enabled=1
[mon-2]
name=mon-2
baseurl=ftp://192.168.2.254/ceph/rhceph-2.0-rhel-7-x86_64/MON/
gpgcheck=0
enabled=1
[osd-2]
name=osd-2
baseurl=ftp://192.168.2.254/ceph/rhceph-2.0-rhel-7-x86_64/OSD/
gpgcheck=0
enabled=1
[tools-2]
name=tools-2
baseurl=ftp://192.168.2.254/ceph/rhceph-2.0-rhel-7-x86_64/Tools/
gpgcheck=0
enabled=1 " > /etc/yum.repos.d/ceph.repo
yum clean all
yum repolist
[root@room9pc01 ~]# 
=======================setlnmp.sh  5========================
  
[root@room9pc01 ~]# cat setlnmp.sh 
#!/usr/bin/expect  -f
set timeout  -1
set eth0    [lindex $argv 0]
spawn  ssh  -o  StrictHostKeyChecking=no  -X  root@192.168.4.$eth0
expect "password:" {send "123\r" }
expect "#" {send "echo Hello world\r"}
expect "#" {send "chmod +x /root/lnmp.sh\r"}
expect "#"    {send "bash /root/lnmp.sh\r"}
expect "#"    {send "sleep 5 && date\r"}
expect "#"    {send "\r"}
[root@room9pc01 ~]# 


 KVM虚拟机关机或断电

(1) 关机

默认情况下virsh工具不能对linux虚拟机进行关机操作，linux操作系统需要开启与启动acpid服务。在安装KVM linux虚拟机必须配置此服务。

# chkconfig acpid on
# service acpid restart

virsh关机

# virsh shutdown oeltest01

 强制关闭电源

# virsh destroy wintest01
4. 通过配置文件启动虚拟机

# virsh create /etc/libvirt/qemu/wintest01.xml

配置开机自启动虚拟机
 KVM虚拟机默认配置文件位置: /etc/libvirt/qemu/

autostart目录是配置kvm虚拟机开机自启动目录。
# virsh autostart oeltest01

autostart目录是kvm虚拟机开机自启动目录，可以看到该目录中有KVM配置文件链接。

[root@room9pc01 qemu]# ls
networks  rh7_node1.xml  rh7_node2.xml  rh7_node3.xml  VMa10.xml  VMa11.xml  VMa12.xml
[root@room9pc01 qemu]# ls networks/
autostart  default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml
[root@room9pc01 qemu]# ls networks/autostart/
default.xml  private1.xml  private2.xml  public1.xml  public2.xml  rhce.xml
[root@room9pc01 qemu]# ll networks/autostart/default.xml 
lrwxrwxrwx 1 root root 38 10月 11 18:06 networks/autostart/default.xml -> /etc/libvirt/qemu/networks/default.xml
[root@room9pc01 qemu]# ls /etc/libvirt/qemu/networks/default.xml
/etc/libvirt/qemu/networks/default.xml

[root@room9pc01 qemu]# vim /etc/libvirt/qemu/networks/default.xml
[root@room9pc01 qemu]# pwd
/etc/libvirt/qemu
[root@room9pc01 qemu]# cat /etc/libvirt/qemu/networks/default.xml


<network>
  <name>default</name>
  <uuid>5bd0383d-d2db-4189-a9da-469810561abf</uuid>
  <forward mode='nat'/>
  <bridge name='virbr0' stp='on' delay='0'/>
  <mac address='52:54:00:c8:58:d3'/>
  <ip address='192.168.122.1' netmask='255.255.255.0'>
    <dhcp>
      <range start='192.168.122.2' end='192.168.122.254'/>
    </dhcp>
  </ip>
</network>
[root@room9pc01 qemu]# 

6. 导出KVM虚拟机配置文件

# virsh dumpxml wintest01 > /etc/libvirt/qemu/wintest02.xml
. 添加与删除KVM虚拟机

(1) 删除kvm虚拟机

# virsh undefine wintest01

说明：该命令只是删除wintest01的配置文件，并不删除虚拟磁盘文件

(2) 重新定义虚拟机配置文件

通过导出备份的配置文件恢复原KVM虚拟机的定义，并重新定义虚拟机。

# mv /etc/libvirt/qemu/wintest02.xml /etc/libvirt/qemu/wintest01.xml

# virsh define /etc/libvirt/qemu/wintest01.xml
. 编辑KVM虚拟机配置文件

# virsh edit wintest01

virsh edit将调用vi命令编辑/etc/libvirt/qemu/wintest01.xml配置文件。也可以直接通过vi命令进行编辑，修改，保存。
[root@node1 qemu]# vi /etc/libvirt/qemu/wintest01.xml


(1) 挂起服务器

# virsh suspend oeltest01
(2) 恢复服务器

# virsh resume oeltest01




















sed
流编辑器 stream editer,是以行为单位的处理程序

sed 流编辑器 stream editer

语法
sed [options] 'command' in_file[s]
options 部分
-n（屏蔽默认输出，默认sed会输出读取文档的全部内容）
-r（让sed支持扩展正则）
-i（sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）
-e  ：直接在命令行模式上进行sed动作编辑，此为默认选项
-f  将sed的动作写在一个文件内，用–f filename 执行filename内的sed动作 
command 部分
'[地址1,地址2] [函数] [参数(标记)]'

定址的方法 1.数字 2.正则
数字
十进制数
1 单行 
1,3	范围 从第一行到第三行
2,+4 匹配行后若干行
4,~3 从第四行到下一个3的倍数行
2~3	第二行起每间隔三行的行
$	尾行
1!	除了第一行以外的行
正则
正则必须用//包裹起来
扩展正则需要用 -r 参数或转义

数字定址：sed -n '1p' /etc/passwd

正则定址：sed -n '/^root/p' /etc/passwd

正则介绍

^	行首
$	行尾
.	除了换行符以外的任意单个字符
*	前导字符的零个或多个
.*	所有字符
[]	字符组内的任一字符
[^]	对字符组内的每个字符取反(不匹配字符组内的每个字符)
^[^]	非字符组内的字符开头的行
[a-z] 小写字母
[A-Z] 大写字母
[a-Z] 小写和大写字母
[0-9] 数字
\<	单词头 单词一般以空格或特殊字符做分隔,连续的字符串被当做单词
\>	单词尾

扩展正则 加 -r 参数 或转义
sed -n '/roo\?/p' /etc/passwd 
sed -rn '/roo?/p' /etc/passwd
? 前导字符零个或一个
+ 前导字符一个或多个
abc|def abc或def
a(bc|de)f abcf 或 adef
x\{m\} x出现m次
x\{m,\} x出现m次至多次(至少m次)
x\{m,n\} x出现m次至n次


函数
增删改
a 后插
c 替换
i 前插
d 删除
输入输出
p 打印匹配的行 一般和 -n 参数连用,以屏蔽默认输出
r 从文件中读入
w 写入到文件中
控制流
! 命令取反 例: 1!d 删除第一行以外的行
{} 命令组合 命令用分号分隔 {1h;G} 可以理解为 -e 参数的另一种写法

= 打印行号(输入行的号码,而非处理的次数行号) 例如： sed -n '2{=;p}' infile
n 读入下一行到模式空间 例:'4{n;d}' 删除第5行
N 而是追加下一行到模式空间，再把当前行和下一行同时应用后面的命令

 

替换
s 字符串替换 s/old/new/

$ sed -n 's/root/ABCDEF/p' /etc/passwd

ABCDEF:x:0:0:root:/root:/bin/bash

operator:x:11:0:operator:/ABCDEF:/sbin/nologin

$ sed -n 's/root/ABCDEF/gp' /etc/passwd

ABCDEF:x:0:0:ABCDEF:/ABCDEF:/bin/bash

operator:x:11:0:operator:/ABCDEF:/sbin/nologin

$ sed -n 's/root/ABCDEF/2p' /etc/passwd

root:x:0:0:ABCDEF:/root:/bin/bash

$ sed -n 's/root/ABCDEF/3p' /etc/passwd

root:x:0:0:root:/ABCDEF:/bin/bash

$ sed -n 's/root/ABCDEF/gp' /etc/passwd

ABCDEF:x:0:0:ABCDEF:/ABCDEF:/bin/bash

operator:x:11:0:operator:/ABCDEF:/sbin/nologin

$

\(\)	保存被匹配的字符 以备反向引用\N时使用 最多9个标签 标签顺序从左至右
&	替换时使用,在不定义标签时使用(反向引用)














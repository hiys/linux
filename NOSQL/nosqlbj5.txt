[root@hiys ~]# sed -n $= ip.sh 
37
[root@hiys ~]# tail -4 ip.sh
expect "#"  {send "\r"}
send "exit\r"

expect eof
[root@hiys ~]# sed  -n '33,$p' ip.sh
expect "#"  {send "sleep 1 && date\r"}
expect "#"  {send "\r"}
send "exit\r"

expect eof
[root@hiys ~]# sed  -n '/send "exit/,$p' ip.sh
send "exit\r"

expect eof
[root@hiys ~]# 



[root@H50 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1990
child process started successfully, parent exiting
[root@H50 ~]# vim txt.txt
[root@H50 ~]# cat txt.txt
show dbs
db
exit
[root@H50 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.50:27050/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H50 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.50:27050      0.0.0.0:*               LISTEN      1990/mongod         
[root@H50 ~]# cat -A txt.txt 
show dbs$
db$
exit$
[root@H50 ~]# 














[root@H51 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1982
child process started successfully, parent exiting
[root@H51 ~]# vim txt.txt
[root@H51 ~]# cat txt.txt
show dbs
db
exit
[root@H51 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.51:27051/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H51 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.51:27051      0.0.0.0:*               LISTEN      1982/mongod         
[root@H51 ~]# 
[root@H51 ~]# mstop 
killing process with pid: 1982

[root@H51 ~]# netstat -anpult |grep mongod

[root@H51 ~]# vim /usr/local/mongodb/etc/mongodb.conf 
[root@H51 ~]# cat /usr/local/mongodb/etc/mongodb.conf
logpath=/usr/local/mongodb/log/mongodb.log
logappend=true
dbpath=/usr/local/mongodb/data/db
fork=true
port=27051
bind_ip=192.168.4.51
replSet=rs1      //加入到副本集，rs1名字随便起，想知道谁和我在一个副本集里，三台机器的名字一样,都写rs1

[root@H51 ~]# mstart 

about to fork child process, waiting until server is ready for connections.
forked process: 2274
child process started successfully, parent exiting

[root@H51 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.51:27051      0.0.0.0:*               LISTEN      2274/mongod         
[root@H51 ~]# 

config = {_id:"rs1",members:[{_id:0,host:":",priority:10}
/************** 指定主库,prioricy************8
config = {
_id:"rs1",
members:[{_id:0,host:"192.168.4.51:27051",priority:10},  # priority:10 ,数字10 最小,是主库
{_id:1,host:"192.168.4.52:27052",priority:11},  # priority:11 ,数字11 非最小,是从库
{_id:2,host:"192.168.4.53:27053",priority:12}]}  # priority:12 ,数字12 非最小,是从库
************/

[root@H51 ~]# linkm127 

MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.51:27051/

> show  dbs   ## 没有初始化之前报错信息
2018-11-03T09:34:45.740+0800 E QUERY    [thread1] Error: listDatabases failed:{
	"ok" : 0,
	"errmsg" : "not master and slaveOk=false",
	"code" : 13435,
	"codeName" : "NotMasterNoSlaveOk",
	"$clusterTime" : {
		"clusterTime" : Timestamp(0, 0),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1
shellHelper.show@src/mongo/shell/utils.js:816:19
shellHelper@src/mongo/shell/utils.js:706:15
@(shellhelp2):1:1
> rs.
rs.add(                        rs.freeze(                     rs.remove(
rs.addArb(                     rs.hasOwnProperty(             rs.slaveOk(
rs.apply(                      rs.help(                       rs.status(
rs.bind(                       rs.initiate(                   rs.stepDown(
rs.call(                       rs.isMaster(                   rs.syncFrom(
rs.compareOpTimes(             rs.printReplicationInfo(       rs.toLocaleString(
rs.conf(                       rs.printSlaveReplicationInfo(  rs.toString(
rs.config(                     rs.propertyIsEnumerable(       rs.valueOf(
rs.constructor                 rs.prototype
rs.debug                       rs.reconfig(
> config = {    ### config随便起变量名,要记住自定义变量名config
... _id:"rs1",  ## 必须为rs1这个，三台主机集群名，配置文件mongodb/etc/mongodb.conf 里面是这个名rs1
... members:[{_id:0,host:"192.168.4.51:27051"},{_id:1,host:"192.168.4.52:27052"},{_id:2,host:"192.168.4.53:27053"}]}   ## _id值随意，host值固定 ,按回车键后出现以下信息
{
	"_id" : "rs1",
	"members" : [
		{
			"_id" : 0,
			"host" : "192.168.4.51:27051"
		},
		{
			"_id" : 1,
			"host" : "192.168.4.52:27052"
		},
		{
			"_id" : 2,
			"host" : "192.168.4.53:27053"
		}
	]
}
> rs.initiate(
Display all 176 possibilities? (y or n) 输入 n ,忘了加 变量集群名(config)

> rs.initiate(config)  ## 初始化Replica Sets环境
{
	"ok" : 1,
	"operationTime" : Timestamp(1541209460, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541209460, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:SECONDARY> rs.status()  ## 查看状态信息
{
	"set" : "rs1",
	"date" : ISODate("2018-11-03T01:47:22.074Z"),
	"myState" : 1,
	"term" : NumberLong(1),
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1541209632, 1),
			"t" : NumberLong(1)
		},
		"readConcernMajorityOpTime" : {
			"ts" : Timestamp(1541209632, 1),
			"t" : NumberLong(1)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1541209632, 1),
			"t" : NumberLong(1)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1541209632, 1),
			"t" : NumberLong(1)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "192.168.4.51:27051",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 1359,
			"optime" : {
				"ts" : Timestamp(1541209632, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T01:47:12Z"),
			"electionTime" : Timestamp(1541209471, 1),
			"electionDate" : ISODate("2018-11-03T01:44:31Z"),
			"configVersion" : 1,
			"self" : true
		},
		{
			"_id" : 1,
			"name" : "192.168.4.52:27052",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 181,
			"optime" : {
				"ts" : Timestamp(1541209632, 1),
				"t" : NumberLong(1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541209632, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T01:47:12Z"),
			"optimeDurableDate" : ISODate("2018-11-03T01:47:12Z"),
			"lastHeartbeat" : ISODate("2018-11-03T01:47:21.843Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T01:47:21.959Z"),
			"pingMs" : NumberLong(0),
			"syncingTo" : "192.168.4.51:27051",
			"configVersion" : 1
		},
		{
			"_id" : 2,
			"name" : "192.168.4.53:27053",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 181,
			"optime" : {
				"ts" : Timestamp(1541209632, 1),
				"t" : NumberLong(1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541209632, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T01:47:12Z"),
			"optimeDurableDate" : ISODate("2018-11-03T01:47:12Z"),
			"lastHeartbeat" : ISODate("2018-11-03T01:47:21.843Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T01:47:22.042Z"),
			"pingMs" : NumberLong(0),
			"syncingTo" : "192.168.4.51:27051",
			"configVersion" : 1
		}
	],
	"ok" : 1,
	"operationTime" : Timestamp(1541209632, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541209632, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:PRIMARY> rs.isMaster()  # 查看是否是master库//提示rs1:PRIMARY，51为主 ,
{
	"hosts" : [
		"192.168.4.51:27051",
		"192.168.4.52:27052",
		"192.168.4.53:27053"
	],
	"setName" : "rs1",
	"setVersion" : 1,
	"ismaster" : true,  # 查看true,是master库,
	"secondary" : false,
	"primary" : "192.168.4.51:27051",
	"me" : "192.168.4.51:27051",
	"electionId" : ObjectId("7fffffff0000000000000001"),
	"lastWrite" : {
		"opTime" : {
			"ts" : Timestamp(1541209732, 1),
			"t" : NumberLong(1)
		},
		"lastWriteDate" : ISODate("2018-11-03T01:48:52Z"),
		"majorityOpTime" : {
			"ts" : Timestamp(1541209732, 1),
			"t" : NumberLong(1)
		},
		"majorityWriteDate" : ISODate("2018-11-03T01:48:52Z")
	},
	"maxBsonObjectSize" : 16777216,
	"maxMessageSizeBytes" : 48000000,
	"maxWriteBatchSize" : 100000,
	"localTime" : ISODate("2018-11-03T01:48:55.005Z"),
	"logicalSessionTimeoutMinutes" : 30,
	"minWireVersion" : 0,
	"maxWireVersion" : 6,
	"readOnly" : false,
	"ok" : 1,
	"operationTime" : Timestamp(1541209732, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541209732, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:PRIMARY> 
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> db
db5
rs1:PRIMARY> show tables
rs1:PRIMARY> db.t1.save({name:"bob",age:19})
WriteResult({ "nInserted" : 1 })
rs1:PRIMARY> 
rs1:PRIMARY> exit
bye
[root@H51 ~]# mstop     ## 关闭服务
killing process with pid: 2274
[root@H51 ~]# netstat -anpult |grep mongod

[root@H51 ~]# /usr/local/mongodb/bin/mongo  --host 192.168.4.53  --port 27053
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.53:27053/
MongoDB server version: 3.6.3
......................................
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> db
db5
rs1:PRIMARY> show tables
t1
rs1:PRIMARY> db.t1.save({name:"bob2",age:29})
WriteResult({ "nInserted" : 1 })
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
rs1:PRIMARY> exit
bye
[root@H51 ~]# mstart      #再次 启动51，启动后不会再变为主，会成为52 或者 53 的从库
about to fork child process, waiting until server is ready for connections.
forked process: 3508
child process started successfully, parent exiting
[root@H51 ~]# linkm127 
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.51:27051/
MongoDB server version: 3.6.3
.......................................
rs1:SECONDARY> rs.isMaster()  # 查看是否是master库//提示rs1:SECONDARY，51为从库 ,
{
	"hosts" : [
		"192.168.4.51:27051",
		"192.168.4.52:27052",
		"192.168.4.53:27053"
	],
	"setName" : "rs1",
	"setVersion" : 1,
	"ismaster" : false,  #再次 启动51，启动后不会再变为主，成为 53 的从库
	"secondary" : true,
	"primary" : "192.168.4.53:27053",
	"me" : "192.168.4.51:27051",
	"lastWrite" : {
		"opTime" : {
			"ts" : Timestamp(1541214395, 1),
			"t" : NumberLong(2)
		},
		"lastWriteDate" : ISODate("2018-11-03T03:06:35Z"),
		"majorityOpTime" : {
			"ts" : Timestamp(1541214395, 1),
			"t" : NumberLong(2)
		},
		"majorityWriteDate" : ISODate("2018-11-03T03:06:35Z")
	},
	"maxBsonObjectSize" : 16777216,
	"maxMessageSizeBytes" : 48000000,
	"maxWriteBatchSize" : 100000,
	"localTime" : ISODate("2018-11-03T03:06:40.037Z"),
	"logicalSessionTimeoutMinutes" : 30,
	"minWireVersion" : 0,
	"maxWireVersion" : 6,
	"readOnly" : false,
	"ok" : 1,
	"operationTime" : Timestamp(1541214395, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541214395, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}

rs1:SECONDARY> exit
bye
[root@H51 ~]#


















[root@H52 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1983
child process started successfully, parent exiting
[root@H52 ~]# vim txt.txt
[root@H52 ~]# cat txt.txt
show dbs
db
exit
[root@H52 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.52:27052/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H52 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.52:27052      0.0.0.0:*               LISTEN      1983/mongod         
[root@H52 ~]# 
[root@H52 ~]# mstop 
killing process with pid: 1983
[root@H52 ~]# netstat -anpult |grep mongod

[root@H52 ~]# vim /usr/local/mongodb/etc/mongodb.conf 
[root@H52 ~]# cat /usr/local/mongodb/etc/mongodb.conf
logpath=/usr/local/mongodb/log/mongodb.log
logappend=true
dbpath=/usr/local/mongodb/data/db
fork=true
port=27052
bind_ip=192.168.4.52
replSet=rs1
[root@H52 ~]# 
[root@H52 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 2231
child process started successfully, parent exiting
[root@H52 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.52:27052      0.0.0.0:*               LISTEN      2231/mongod         
[root@H52 ~]# 

[root@H52 ~]# linkm127 
..............................
rs1:SECONDARY> exit
bye
[root@H52 ~]# alias  linkm127

alias linkm127='/usr/local/mongodb/bin/mongo  --host 192.168.4.52  --port 27052'

[root@H52 ~]# /usr/local/mongodb/bin/mongo  --host 192.168.4.51  --port 27051

rs1:PRIMARY> db.getMongo().setSlaveOk()
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> db
db5
rs1:PRIMARY> show tables
t1
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
rs1:PRIMARY> 
rs1:PRIMARY> exit
bye
[root@H52 ~]# linkm127 


[root@H52 ~]# linkm127 
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.52:27052/
MongoDB server version: 3.6.3
Server has startup warnings: 
2018-11-03T09:24:35.602+0800 I CONTROL  [initandlisten] 
2018-11-03T09:24:35.602+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2018-11-03T09:24:35.602+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2018-11-03T09:24:35.602+0800 I CONTROL  [initandlisten] ** WARNING: You are running this process as the root user, which is not recommended.
2018-11-03T09:24:35.602+0800 I CONTROL  [initandlisten] 
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] 
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/enabled is 'always'.
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] 
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] ** WARNING: /sys/kernel/mm/transparent_hugepage/defrag is 'always'.
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] **        We suggest setting it to 'never'
2018-11-03T09:24:35.603+0800 I CONTROL  [initandlisten] 
rs1:SECONDARY> rs.status()
{
	"set" : "rs1",
	"date" : ISODate("2018-11-03T03:00:56.672Z"),
	"myState" : 2,
	"term" : NumberLong(2),
	"syncingTo" : "192.168.4.53:27053",
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1541214055, 1),
			"t" : NumberLong(2)
		},
		"readConcernMajorityOpTime" : {
			"ts" : Timestamp(1541214055, 1),
			"t" : NumberLong(2)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1541214055, 1),
			"t" : NumberLong(2)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1541214055, 1),
			"t" : NumberLong(2)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "192.168.4.51:27051",
			"health" : 0,
			"state" : 8,
			"stateStr" : "(not reachable/healthy)",
			"uptime" : 0,
			"optime" : {
				"ts" : Timestamp(0, 0),
				"t" : NumberLong(-1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(0, 0),
				"t" : NumberLong(-1)
			},
			"optimeDate" : ISODate("1970-01-01T00:00:00Z"),
			"optimeDurableDate" : ISODate("1970-01-01T00:00:00Z"),
			"lastHeartbeat" : ISODate("2018-11-03T03:00:55.132Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T02:55:02.609Z"),
			"pingMs" : NumberLong(0),
			"lastHeartbeatMessage" : "Connection refused",
			"configVersion" : -1
		},
		{
			"_id" : 1,
			"name" : "192.168.4.52:27052",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 5782,
			"optime" : {
				"ts" : Timestamp(1541214055, 1),
				"t" : NumberLong(2)
			},
			"optimeDate" : ISODate("2018-11-03T03:00:55Z"),
			"syncingTo" : "192.168.4.53:27053",
			"configVersion" : 1,
			"self" : true
		},
		{
			"_id" : 2,
			"name" : "192.168.4.53:27053",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 4594,
			"optime" : {
				"ts" : Timestamp(1541214055, 1),
				"t" : NumberLong(2)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541214055, 1),
				"t" : NumberLong(2)
			},
			"optimeDate" : ISODate("2018-11-03T03:00:55Z"),
			"optimeDurableDate" : ISODate("2018-11-03T03:00:55Z"),
			"lastHeartbeat" : ISODate("2018-11-03T03:00:54.798Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T03:00:55.164Z"),
			"pingMs" : NumberLong(0),
			"electionTime" : Timestamp(1541213713, 1),
			"electionDate" : ISODate("2018-11-03T02:55:13Z"),
			"configVersion" : 1
		}
	],
	"ok" : 1,
	"operationTime" : Timestamp(1541214055, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541214055, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:SECONDARY>  
rs1:SECONDARY> 
rs1:SECONDARY> show dbs
2018-11-03T11:04:37.884+0800 E QUERY    [thread1] Error: listDatabases failed:{
	"operationTime" : Timestamp(1541214275, 1),
	"ok" : 0,
	"errmsg" : "not master and slaveOk=false",
	"code" : 13435,
	"codeName" : "NotMasterNoSlaveOk",
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541214275, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
} :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
Mongo.prototype.getDBs@src/mongo/shell/mongo.js:65:1
shellHelper.show@src/mongo/shell/utils.js:816:19
shellHelper@src/mongo/shell/utils.js:706:15
@(shellhelp2):1:1
rs1:SECONDARY> exit
bye
[root@H52 ~]# 
































[root@H53 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 2006
child process started successfully, parent exiting
[root@H53 ~]# vim txt.txt
[root@H53 ~]# cat txt.txt
show dbs
db
exit
[root@H53 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.53:27053/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H53 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.53:27053      0.0.0.0:*               LISTEN      2006/mongod         
[root@H53 ~]# 
[root@H53 ~]# mstop 
killing process with pid: 2006
[root@H53 ~]# netstat -anpult |grep mongod

[root@H53 ~]# vim /usr/local/mongodb/etc/mongodb.conf 
[root@H53 ~]# cat /usr/local/mongodb/etc/mongodb.conf
logpath=/usr/local/mongodb/log/mongodb.log
logappend=true
dbpath=/usr/local/mongodb/data/db
fork=true
port=27053
bind_ip=192.168.4.53
replSet=rs1
[root@H53 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 2356
child process started successfully, parent exiting
[root@H53 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.53:27053      0.0.0.0:*               LISTEN      2356/mongod         
[root@H53 ~]# 
[root@H53 ~]# linkm127 

rs1:SECONDARY>  rs.isMaster()
{
	"hosts" : [
		"192.168.4.51:27051",
		"192.168.4.52:27052",
		"192.168.4.53:27053"
	],
	"setName" : "rs1",
	"setVersion" : 1,
	"ismaster" : false,
	"secondary" : true,
	"primary" : "192.168.4.51:27051",
	"me" : "192.168.4.53:27053",
	"lastWrite" : {
		"opTime" : {
			"ts" : Timestamp(1541212272, 1),
			"t" : NumberLong(1)
		},
		"lastWriteDate" : ISODate("2018-11-03T02:31:12Z"),
		"majorityOpTime" : {
			"ts" : Timestamp(1541212272, 1),
			"t" : NumberLong(1)
		},
		"majorityWriteDate" : ISODate("2018-11-03T02:31:12Z")
	},
	"maxBsonObjectSize" : 16777216,
	"maxMessageSizeBytes" : 48000000,
	"maxWriteBatchSize" : 100000,
	"localTime" : ISODate("2018-11-03T02:31:14.014Z"),
	"logicalSessionTimeoutMinutes" : 30,
	"minWireVersion" : 0,
	"maxWireVersion" : 6,
	"readOnly" : false,
	"ok" : 1,
	"operationTime" : Timestamp(1541212272, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541212272, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:SECONDARY> exit
bye
[root@H53 ~]# alias  linkm127
alias linkm127='/usr/local/mongodb/bin/mongo  --host 192.168.4.53  --port  27053'
[root@H53 ~]#  /usr/local/mongodb/bin/mongo  --host 192.168.4.51  --port 27051
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.51:27051/
..........................................
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> show tables
t1
rs1:PRIMARY> rs.status()
{
	"set" : "rs1",
	"date" : ISODate("2018-11-03T02:33:41.178Z"),
	"myState" : 1,
	"term" : NumberLong(1),
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1541212412, 1),
			"t" : NumberLong(1)
		},
		"readConcernMajorityOpTime" : {
			"ts" : Timestamp(1541212412, 1),
			"t" : NumberLong(1)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1541212412, 1),
			"t" : NumberLong(1)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1541212412, 1),
			"t" : NumberLong(1)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "192.168.4.51:27051",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 4138,
			"optime" : {
				"ts" : Timestamp(1541212412, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T02:33:32Z"),
			"electionTime" : Timestamp(1541209471, 1),
			"electionDate" : ISODate("2018-11-03T01:44:31Z"),
			"configVersion" : 1,
			"self" : true
		},
		{
			"_id" : 1,
			"name" : "192.168.4.52:27052",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 2960,
			"optime" : {
				"ts" : Timestamp(1541212412, 1),
				"t" : NumberLong(1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541212412, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T02:33:32Z"),
			"optimeDurableDate" : ISODate("2018-11-03T02:33:32Z"),
			"lastHeartbeat" : ISODate("2018-11-03T02:33:39.956Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T02:33:40.048Z"),
			"pingMs" : NumberLong(0),
			"syncingTo" : "192.168.4.51:27051",
			"configVersion" : 1
		},
		{
			"_id" : 2,
			"name" : "192.168.4.53:27053",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 2960,
			"optime" : {
				"ts" : Timestamp(1541212412, 1),
				"t" : NumberLong(1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541212412, 1),
				"t" : NumberLong(1)
			},
			"optimeDate" : ISODate("2018-11-03T02:33:32Z"),
			"optimeDurableDate" : ISODate("2018-11-03T02:33:32Z"),
			"lastHeartbeat" : ISODate("2018-11-03T02:33:39.956Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T02:33:40.145Z"),
			"pingMs" : NumberLong(0),
			"syncingTo" : "192.168.4.51:27051",
			"configVersion" : 1
		}
	],
	"ok" : 1,
	"operationTime" : Timestamp(1541212412, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541212412, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:PRIMARY> 
rs1:PRIMARY> exit
bye
[root@H53 ~]# linkm127 
2018-11-03T09:24:24.786+0800 I CONTROL  [initandlisten] 
rs1:PRIMARY> rs.status()
{
	"set" : "rs1",
	"date" : ISODate("2018-11-03T03:00:40.531Z"),
	"myState" : 1,
	"term" : NumberLong(2),
	"heartbeatIntervalMillis" : NumberLong(2000),
	"optimes" : {
		"lastCommittedOpTime" : {
			"ts" : Timestamp(1541214035, 1),
			"t" : NumberLong(2)
		},
		"readConcernMajorityOpTime" : {
			"ts" : Timestamp(1541214035, 1),
			"t" : NumberLong(2)
		},
		"appliedOpTime" : {
			"ts" : Timestamp(1541214035, 1),
			"t" : NumberLong(2)
		},
		"durableOpTime" : {
			"ts" : Timestamp(1541214035, 1),
			"t" : NumberLong(2)
		}
	},
	"members" : [
		{
			"_id" : 0,
			"name" : "192.168.4.51:27051",
			"health" : 0,
			"state" : 8,
			"stateStr" : "(not reachable/healthy)",
			"uptime" : 0,
			"optime" : {
				"ts" : Timestamp(0, 0),
				"t" : NumberLong(-1)
			},
			"optimeDurable" : {
				"ts" : Timestamp(0, 0),
				"t" : NumberLong(-1)
			},
			"optimeDate" : ISODate("1970-01-01T00:00:00Z"),
			"optimeDurableDate" : ISODate("1970-01-01T00:00:00Z"),
			"lastHeartbeat" : ISODate("2018-11-03T03:00:39.798Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T02:55:02.980Z"),
			"pingMs" : NumberLong(0),
			"lastHeartbeatMessage" : "Connection refused",
			"configVersion" : -1
		},
		{
			"_id" : 1,
			"name" : "192.168.4.52:27052",
			"health" : 1,
			"state" : 2,
			"stateStr" : "SECONDARY",
			"uptime" : 4577,
			"optime" : {
				"ts" : Timestamp(1541214035, 1),
				"t" : NumberLong(2)
			},
			"optimeDurable" : {
				"ts" : Timestamp(1541214035, 1),
				"t" : NumberLong(2)
			},
			"optimeDate" : ISODate("2018-11-03T03:00:35Z"),
			"optimeDurableDate" : ISODate("2018-11-03T03:00:35Z"),
			"lastHeartbeat" : ISODate("2018-11-03T03:00:39.524Z"),
			"lastHeartbeatRecv" : ISODate("2018-11-03T03:00:39.157Z"),
			"pingMs" : NumberLong(0),
			"syncingTo" : "192.168.4.53:27053",
			"configVersion" : 1
		},
		{
			"_id" : 2,
			"name" : "192.168.4.53:27053",
			"health" : 1,
			"state" : 1,
			"stateStr" : "PRIMARY",
			"uptime" : 5777,
			"optime" : {
				"ts" : Timestamp(1541214035, 1),
				"t" : NumberLong(2)
			},
			"optimeDate" : ISODate("2018-11-03T03:00:35Z"),
			"electionTime" : Timestamp(1541213713, 1),
			"electionDate" : ISODate("2018-11-03T02:55:13Z"),
			"configVersion" : 1,
			"self" : true
		}
	],
	"ok" : 1,
	"operationTime" : Timestamp(1541214035, 1),
	"$clusterTime" : {
		"clusterTime" : Timestamp(1541214035, 1),
		"signature" : {
			"hash" : BinData(0,"AAAAAAAAAAAAAAAAAAAAAAAAAAA="),
			"keyId" : NumberLong(0)
		}
	}
}
rs1:PRIMARY> 
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> show tables
t1
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
rs1:PRIMARY> exit
bye
[root@H53 ~]# linkm127 
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.53:27053/
......................................
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> show tables
t1
rs1:PRIMARY> use local
switched to db local
rs1:PRIMARY> db
local
rs1:PRIMARY> show tables
me
oplog.rs
replset.election
replset.minvalid
replset.oplogTruncateAfterPoint
startup_log
system.replset
system.rollback.id
rs1:PRIMARY> db.me.find()
{ "_id" : ObjectId("5bdcf8c8e07c3d953ed39f1f"), "host" : "H53" }
rs1:PRIMARY> db.system.replset.find()
{ "_id" : "rs1", "version" : 1, "protocolVersion" : NumberLong(1), "members" : [ { "_id" : 0, "host" : "192.168.4.51:27051", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : {  }, "slaveDelay" : NumberLong(0), "votes" : 1 }, { "_id" : 1, "host" : "192.168.4.52:27052", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : {  }, "slaveDelay" : NumberLong(0), "votes" : 1 }, { "_id" : 2, "host" : "192.168.4.53:27053", "arbiterOnly" : false, "buildIndexes" : true, "hidden" : false, "priority" : 1, "tags" : {  }, "slaveDelay" : NumberLong(0), "votes" : 1 } ], "settings" : { "chainingAllowed" : true, "heartbeatIntervalMillis" : 2000, "heartbeatTimeoutSecs" : 10, "electionTimeoutMillis" : 10000, "catchUpTimeoutMillis" : -1, "catchUpTakeoverDelayMillis" : 30000, "getLastErrorModes" : {  }, "getLastErrorDefaults" : { "w" : 1, "wtimeout" : 0 }, "replicaSetId" : ObjectId("5bdcfd74ae377f54d9d1ed8a") } }
rs1:PRIMARY>  exit
bye
[root@H53 ~]# clear


[root@H53 ~]# mkdir  /mdb/
[root@H53 ~]# cp  /etc/passwd  /mdb/
[root@H53 ~]# cd /mdb/;ls
passwd
[root@H53 mdb]# sed -i 's/:/,/g' passwd 
[root@H53 mdb]# head -2 passwd
root,x,0,0,root,/root,/bin/bash
bin,x,1,1,bin,/bin,/sbin/nologin
[root@H53 mdb]# sed -n $= passwd
41
[root@H53 mdb]# 
[root@H53 mdb]# sed -i '1i name,password,uid,gid,comment,homedir,shell' passwd
[root@H53 mdb]# head -2 passwd
name,password,uid,gid,comment,homedir,shell
root,x,0,0,root,/root,/bin/bash
[root@H53 mdb]# mongoimport --host 192.168.4.53 --port 27053  -d db5 \
> -c  usertab   --headerline  --type=csv  passwd

2018-11-03T11:24:33.510+0800	connected to: 192.168.4.53:27053
2018-11-03T11:24:34.051+0800	imported 41 documents

[root@H53 mdb]# linkm127 
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.53:27053/
...............................
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> db
db5
rs1:PRIMARY> show tables
t1
usertab
rs1:PRIMARY> db.usertab.count()
41
rs1:PRIMARY> db.usertab.find({name:"root"})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "name" : "root", "password" : "x", "uid" : 0, "gid" : 0, "comment" : "root", "homedir" : "/root", "shell" : "/bin/bash" }
rs1:PRIMARY> exit
bye
[root@H53 mdb]# mongoexport  --host 192.168.4.53  --port 27053 \
> -d db5 -c  usertab  --type=json > /mdb/db5-usertab.json

2018-11-03T11:28:24.706+0800	connected to: 192.168.4.53:27053
2018-11-03T11:28:24.710+0800	exported 41 records

[root@H53 mdb]# ls
db5-usertab.json  passwd
[root@H53 mdb]# mongoexport  --host 192.168.4.53  --port 27053 -d db5 -c  usertab \
> -f name,password,uid,gid,shell   --type=csv > /mdb/db5-usertab.csv

2018-11-03T11:29:52.368+0800	connected to: 192.168.4.53:27053
2018-11-03T11:29:52.369+0800	exported 41 records

[root@H53 mdb]# ls
db5-usertab.csv  db5-usertab.json  passwd

[root@H53 mdb]# head -2 db5-usertab.csv 
name,password,uid,gid,shell
root,x,0,0,/bin/bash
[root@H53 mdb]# head -2 db5-usertab.json 
{"_id":{"$oid":"5bdd14f1e07c3d953ed3d4b2"},"name":"root","password":"x","uid":0,"gid":0,"comment":"root","homedir":"/root","shell":"/bin/bash"}
{"_id":{"$oid":"5bdd14f1e07c3d953ed3d4b3"},"name":"bin","password":"x","uid":1,"gid":1,"comment":"bin","homedir":"/bin","shell":"/sbin/nologin"}
[root@H53 mdb]# 

[root@H53 mdb]# cd
[root@H53 ~]# linkm127 
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.53:27053/
.......................................
rs1:PRIMARY> show tables
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> show tables
t1
usertab
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
rs1:PRIMARY> db.t1.save({_id:7,name:"bob"})
WriteResult({ "nMatched" : 0, "nUpserted" : 1, "nModified" : 0, "_id" : 7 })
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "bob" }
rs1:PRIMARY> db.t1.save({_id:7,name:"lucy"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "lucy" }
rs1:PRIMARY> 
rs1:PRIMARY> 
rs1:PRIMARY> db.t1.insert({_id:17,name:"lucy"})
WriteResult({ "nInserted" : 1 })
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "lucy" }
{ "_id" : 17, "name" : "lucy" }
rs1:PRIMARY> db.t1.insertMany({_id:19,name:"jack"},{_id:20,name:"jack2"},{7, "name" : "lucy"})

2018-11-03T11:42:02.496+0800 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:62
rs1:PRIMARY> 
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "lucy" }
{ "_id" : 17, "name" : "lucy" }
rs1:PRIMARY> db.t1.insertMany({_id:19,name:"jack"},{_id:20,name:"jack2"},{27, "name" : "lucy"})
2018-11-03T11:42:29.152+0800 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:63
rs1:PRIMARY> db.t1.insertMany({_id:19,name:"jack"},{_id:20,name:"jack2"},{_id:7, "name" : "lucy"})
2018-11-03T11:42:53.792+0800 E QUERY    [thread1] TypeError: documents.map is not a function :
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:295:1
@(shell):1:1
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "lucy" }
{ "_id" : 17, "name" : "lucy" }
rs1:PRIMARY> 
rs1:PRIMARY> db.t1.insertMany([{_id:19,name:"jack"},{_id:20,name:"jack2"},{_id:7, "name" : "lucy"}])
2018-11-03T11:45:06.069+0800 E QUERY    [thread1] BulkWriteError: write error at item 2 in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 2,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: db5.t1 index: _id_ dup key: { : 7.0 }",
			"op" : {
				"_id" : 7,
				"name" : "lucy"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1
rs1:PRIMARY> db.t1.insertMany([{_id:19,name:"jack"},{_id:20,name:"jack2"},{_id:7,"name":"lucy"}])
2018-11-03T11:46:17.891+0800 E QUERY    [thread1] BulkWriteError: write error at item 0 in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 0,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: db5.t1 index: _id_ dup key: { : 19.0 }",
			"op" : {
				"_id" : 19,
				"name" : "jack"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 0,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1
rs1:PRIMARY> db.t1.insertMany([{_id:19,name:"jack"},{_id:20,name:"jack2"},{_id:7,name:"lucy"}])
2018-11-03T11:47:08.924+0800 E QUERY    [thread1] BulkWriteError: write error at item 0 in bulk operation :
BulkWriteError({
	"writeErrors" : [
		{
			"index" : 0,
			"code" : 11000,
			"errmsg" : "E11000 duplicate key error collection: db5.t1 index: _id_ dup key: { : 19.0 }",
			"op" : {
				"_id" : 19,
				"name" : "jack"
			}
		}
	],
	"writeConcernErrors" : [ ],
	"nInserted" : 0,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})
BulkWriteError@src/mongo/shell/bulk_api.js:369:48
BulkWriteResult/this.toError@src/mongo/shell/bulk_api.js:333:24
Bulk/this.execute@src/mongo/shell/bulk_api.js:1177:1
DBCollection.prototype.insertMany@src/mongo/shell/crud_api.js:314:5
@(shell):1:1
rs1:PRIMARY> db.t1.find()
{ "_id" : ObjectId("5bdd063ca9d771b5745ea6b9"), "name" : "bob", "age" : 19 }
{ "_id" : ObjectId("5bdd0ffd09a16c396217035e"), "name" : "bob2", "age" : 29 }
{ "_id" : 7, "name" : "lucy" }
{ "_id" : 17, "name" : "lucy" }
{ "_id" : 19, "name" : "jack" }
{ "_id" : 20, "name" : "jack2" }
rs1:PRIMARY> 
rs1:PRIMARY> db
db5
rs1:PRIMARY> show tables
t1
usertab
rs1:PRIMARY> db.usertab.findOne()
{
	"_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"),
	"name" : "root",
	"password" : "x",
	"uid" : 0,
	"gid" : 0,
	"comment" : "root",
	"homedir" : "/root",
	"shell" : "/bin/bash"
}
rs1:PRIMARY> db.usertab.findOne({_id:0})
null
rs1:PRIMARY> db.usertab.findOne({},{_id:0})
{
	"name" : "root",
	"password" : "x",
	"uid" : 0,
	"gid" : 0,
	"comment" : "root",
	"homedir" : "/root",
	"shell" : "/bin/bash"
}
rs1:PRIMARY> db.usertab.findOne({},{_id:0,name:1,uid:1})
{ "name" : "root", "uid" : 0 }
rs1:PRIMARY> 
rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
...............................................
{ "name" : "saslauth", "uid" : 996, "shell" : "/sbin/nologin" }
Type "it" for more  ##一次最多显示20行,按 it 继续显示剩余的行
rs1:PRIMARY> 

rs1:PRIMARY> db
test
rs1:PRIMARY> show dbs
admin   0.000GB
config  0.000GB
db5     0.000GB
local   0.000GB
rs1:PRIMARY> use db5
switched to db db5
rs1:PRIMARY> show tables
t1
usertab
rs1:PRIMARY> db.usertab.find().limit(3)      ## 限制前3行显示.limit(3)
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "name" : "root", "password" : "x", "uid" : 0, "gid" : 0, "comment" : "root", "homedir" : "/root", "shell" : "/bin/bash" }
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b3"), "name" : "bin", "password" : "x", "uid" : 1, "gid" : 1, "comment" : "bin", "homedir" : "/bin", "shell" : "/sbin/nologin" }
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b4"), "name" : "daemon", "password" : "x", "uid" : 2, "gid" : 2, "comment" : "daemon", "homedir" : "/sbin", "shell" : "/sbin/nologin" }
                                                       ## 限制前3行显示.limit(3)
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).limit(3)
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 
                                                       ## 跳过前1行.skip(1)
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).skip(1)
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
..................................................
{ "name" : "dbus", "uid" : 81, "shell" : "/sbin/nologin" }
{ "name" : "polkitd", "uid" : 999, "shell" : "/sbin/nologin" }
{ "name" : "libstoragemgmt", "uid" : 998, "shell" : "/sbin/nologin" }
{ "name" : "rpc", "uid" : 32, "shell" : "/sbin/nologin" }

{ "name" : "colord", "uid" : 997, "shell" : "/sbin/nologin" }
{ "name" : "saslauth", "uid" : 996, "shell" : "/sbin/nologin" }
{ "name" : "abrt", "uid" : 173, "shell" : "/sbin/nologin" }
{ "name" : "rtkit", "uid" : 172, "shell" : "/sbin/nologin" }
{ "name" : "radvd", "uid" : 75, "shell" : "/sbin/nologin" }
{ "name" : "chrony", "uid" : 995, "shell" : "/sbin/nologin" }
{ "name" : "tss", "uid" : 59, "shell" : "/sbin/nologin" }
Type "it" for more
                                                              ## 跳过前 14 行.skip(14)
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).skip(14)
{ "name" : "colord", "uid" : 997, "shell" : "/sbin/nologin" }
{ "name" : "saslauth", "uid" : 996, "shell" : "/sbin/nologin" }
..........................................................
{ "name" : "postfix", "uid" : 89, "shell" : "/sbin/nologin" }
{ "name" : "ntp", "uid" : 38, "shell" : "/sbin/nologin" }
Type "it" for more
rs1:PRIMARY> 
rs1:PRIMARY>                                                       #降序.sort({uid:-1})
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).sort({uid:-1})
{ "name" : "nfsnobody", "uid" : 65534, "shell" : "/sbin/nologin" }
{ "name" : "polkitd", "uid" : 999, "shell" : "/sbin/nologin" }
{ "name" : "libstoragemgmt", "uid" : 998, "shell" : "/sbin/nologin" }
..................................................
{ "name" : "radvd", "uid" : 75, "shell" : "/sbin/nologin" }
{ "name" : "sshd", "uid" : 74, "shell" : "/sbin/nologin" }
Type "it" for more
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).sort({uid:1}) #升序
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
................................................................
{ "name" : "dbus", "uid" : 81, "shell" : "/sbin/nologin" }
{ "name" : "postfix", "uid" : 89, "shell" : "/sbin/nologin" }
{ "name" : "nobody", "uid" : 99, "shell" : "/sbin/nologin" }
Type "it" for more
rs1:PRIMARY> 
rs1:PRIMARY>                               #升序.sort({uid:1})
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).sort({uid:1}).limit(3)
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
rs1:PRIMARY>                                       #降序.sort({uid:-1})
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).sort({uid:-1}).limit(3)
{ "name" : "nfsnobody", "uid" : 65534, "shell" : "/sbin/nologin" }
{ "name" : "polkitd", "uid" : 999, "shell" : "/sbin/nologin" }
{ "name" : "libstoragemgmt", "uid" : 998, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 
                               ## 跳过前2行.skip(2)跳过几行显示 （2行）
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).sort({uid:-1}).limit(3).skip(2)
{ "name" : "libstoragemgmt", "uid" : 998, "shell" : "/sbin/nologin" }
{ "name" : "colord", "uid" : 997, "shell" : "/sbin/nologin" }
{ "name" : "saslauth", "uid" : 996, "shell" : "/sbin/nologin" }
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).limit(3).skip(2).sort({uid:-1})
{ "name" : "libstoragemgmt", "uid" : 998, "shell" : "/sbin/nologin" }
{ "name" : "colord", "uid" : 997, "shell" : "/sbin/nologin" }
{ "name" : "saslauth", "uid" : 996, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({shell:"/bin/bash"},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "lisi", "uid" : 1000, "shell" : "/bin/bash" }
rs1:PRIMARY> db.usertab.find({shell:"/bin/bash"},{_id:0,name:1,uid:1,shell:1}).count()
2
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).count()
35
rs1:PRIMARY> db.usertab.find({shell:"/sbin/nologin"},{_id:0,name:1,uid:1,shell:1}).limit(2)
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }

rs1:PRIMARY> db.usertab.find({},{_id:0,name:1,uid:1,shell:1}).limit(2)
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }

     ## 不看_id字段 , 查看每行的name字段 #db.usertab.find（{条件},{定义显示的字段}）#指定查询条件并指定显示的字段

rs1:PRIMARY> db.usertab.find({},{_id:0,name:1,uid:1,shell:1}).count()
41
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({name:"root"},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }

                             #name  是 root 并且 uid 是3 同时满足条件,则显示结果,不符合条件,无显示
rs1:PRIMARY> db.usertab.find({name:"root",uid:3},{_id:0,name:1,uid:1,shell:1})

               #name  是 root 并且 uid 是0 同时满足条件,则显示结果,不符合条件,无显示
rs1:PRIMARY> db.usertab.find({name:"root",uid:0},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
rs1:PRIMARY> 
                                     ## $in 在...里
rs1:PRIMARY> db.usertab.find({uid:{$in:[1,3,5,7,9]}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "sync", "uid" : 5, "shell" : "/bin/sync" }
{ "name" : "halt", "uid" : 7, "shell" : "/sbin/halt" }

rs1:PRIMARY> db.usertab.find({uid:{$nin:[1,3,5,7,9]}},{_id:0,name:1,uid:1,shell:1}).count()
37
                  ## $nin 不在...里
rs1:PRIMARY> db.usertab.find({uid:{$nin:[1,3,5,7,9]}},{_id:0,name:1,uid:1,shell:1}).limit(2)
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }

rs1:PRIMARY> db.usertab.find({$or:[{name:"root"},{uid:10},{shell:"/bin/bash"}]},{_id:0,name:1,uid:1,shell:1}).count()
2                              
                         ##   $or 条件满足任意其中一个即可
rs1:PRIMARY> db.usertab.find({$or:[{name:"root"},{uid:10},{shell:"/bin/bash"}]},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "lisi", "uid" : 1000, "shell" : "/bin/bash" }
rs1:PRIMARY> 
                               ## 查看以a开头的name字段
rs1:PRIMARY> db.usertab.find({name:/^a/},{_id:0,name:1,uid:1,shell:1})
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "abrt", "uid" : 173, "shell" : "/sbin/nologin" }
{ "name" : "avahi", "uid" : 70, "shell" : "/sbin/nologin" }

                      ##查看以a开头的name字段,并且 uid 是3 的字段
rs1:PRIMARY> db.usertab.find({name:/^a/,uid:3},{_id:0,name:1,uid:1,shell:1})
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({uid:{$lt:3}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }

数值比较
               查看 uid 小于 10 并且 大于 3  的文档(记录)

rs1:PRIMARY> db.usertab.find({uid:{$gt:3,$lt:10}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
{ "name" : "sync", "uid" : 5, "shell" : "/bin/sync" }
{ "name" : "shutdown", "uid" : 6, "shell" : "/sbin/shutdown" }
{ "name" : "halt", "uid" : 7, "shell" : "/sbin/halt" }
{ "name" : "mail", "uid" : 8, "shell" : "/sbin/nologin" }
数值比较
$lt(小于) $lte（小于等于） $gt（大于） $gte（大于等于） $ne（不等于）

rs1:PRIMARY> db.usertab.find({uid:{$gt:3,$lt:7}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
{ "name" : "sync", "uid" : 5, "shell" : "/bin/sync" }
{ "name" : "shutdown", "uid" : 6, "shell" : "/sbin/shutdown" }
rs1:PRIMARY> 
数值比较
$lt(小于) $lte（小于等于） $gt（大于） $gte（大于等于） $ne（不等于） $eq 等于
                       查看 uid 小于等于 7   并且 大于等于 3  的文档(记录)
rs1:PRIMARY> db.usertab.find({uid:{$gte:3,$lte:7}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
{ "name" : "sync", "uid" : 5, "shell" : "/bin/sync" }
{ "name" : "shutdown", "uid" : 6, "shell" : "/sbin/shutdown" }
{ "name" : "halt", "uid" : 7, "shell" : "/sbin/halt" }
rs1:PRIMARY> 
                                 ## $eq 等于
rs1:PRIMARY> db.usertab.find({uid:{$eq:7}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "halt", "uid" : 7, "shell" : "/sbin/halt" }

                                       # $ne（不等于）
rs1:PRIMARY> db.usertab.find({uid:{$ne:7}},{_id:0,name:1,uid:1,shell:1}).limit(3)
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 
                              save和insert的区别
相同点：当集合不存在时创建集合，并插入记录
不同点：save() _id字段值已经存在时，修改文档字段值
insert() _id字段值已经存在时，放弃修改文档字段值

rs1:PRIMARY> db.usertab.save({name:null,uid:1002})
WriteResult({ "nInserted" : 1 })

rs1:PRIMARY> db.usertab.find({name:null},{_id:0,name:1,uid:1,shell:1})
{ "name" : null, "uid" : 1002 }

rs1:PRIMARY> db.usertab.save({name:"",uid:1012,shell:"/bin/bash"})
WriteResult({ "nInserted" : 1 })

     ## 匹配null：可以匹配没有的字段，也可以检查这个字段有没有
rs1:PRIMARY> db.usertab.find({name:null},{_id:0,name:1,uid:1,shell:1})
{ "name" : null, "uid" : 1002 }
                            ## 注意这里""不是空,null是空值
rs1:PRIMARY> db.usertab.find({name:""},{_id:0,name:1,uid:1,shell:1})
{ "name" : "", "uid" : 1012, "shell" : "/bin/bash" }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({uid:{$lte:4}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "root", "uid" : 0, "shell" : "/bin/bash" }
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 
                         ## update修改,默认无修改的字段全删除 注意坑大大的

rs1:PRIMARY> db.usertab.update({uid:{$lte:4}},{password:"A"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({uid:{$lte:4}},{_id:0,name:1,uid:1,shell:1})
{ "name" : "bin", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "lp", "uid" : 4, "shell" : "/sbin/nologin" }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({uid:{$lte:4}},{_id:0,name:1,uid:1,shell:1,password:1})
{ "name" : "bin", "password" : "x", "uid" : 1, "shell" : "/sbin/nologin" }
{ "name" : "daemon", "password" : "x", "uid" : 2, "shell" : "/sbin/nologin" }
{ "name" : "adm", "password" : "x", "uid" : 3, "shell" : "/sbin/nologin" }
{ "name" : "lp", "password" : "x", "uid" : 4, "shell" : "/sbin/nologin" }

rs1:PRIMARY> db.usertab.find({password:"A"},{_id:0,name:1,uid:1,shell:1,password:1})
{ "password" : "A" }

rs1:PRIMARY> db.usertab.find({password:"A"},{_id:1,name:1,uid:1,shell:1,password:1})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "password" : "A" }
rs1:PRIMARY> 

  ## 匹配null：可以匹配没有的字段，也可以检查这个字段有没有

rs1:PRIMARY> db.usertab.find({uid:null},{_id:1,name:1,uid:1,shell:1,password:1})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "password" : "A" }


rs1:PRIMARY> db.usertab.find({name:null},{_id:1,name:1,uid:1,shell:1,password:1})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "password" : "A" }
{ "_id" : ObjectId("5bdd4f0d70beda86affa0bc7"), "name" : null, "uid" : 1002 }
rs1:PRIMARY> 

                  ## update修改,默认无修改的字段全删除 注意坑大大的

rs1:PRIMARY> db.usertab.update({uid:1,name:"bin"},{password:"F",shell:"ahahaha",uid:1,name:"bin"})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({gid:null})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b2"), "password" : "A" }
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b3"), "password" : "F", "shell" : "ahahaha", "uid" : 1, "name" : "bin" }
{ "_id" : ObjectId("5bdd4f0d70beda86affa0bc7"), "name" : null, "uid" : 1002 }
{ "_id" : ObjectId("5bdd4f5970beda86affa0bc8"), "name" : "", "uid" : 1012, "shell" : "/bin/bash" }

   ## 解决办法$set 条件匹配时，修改指定字段的值(局部修改)
  //默认修改匹配条件的第一行

rs1:PRIMARY> db.usertab.find({password:"F"})
{ "_id" : ObjectId("5bdd14f1e07c3d953ed3d4b3"), "password" : "F", "shell" : "ahahaha", "uid" : 1, "name" : "bin" }
rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({uid:{$gte:3,$lte:6}},{_id:0})
{ "name" : "adm", "password" : "x", "uid" : 3, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm", "shell" : "/sbin/nologin" }
{ "name" : "lp", "password" : "x", "uid" : 4, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd", "shell" : "/sbin/nologin" }
{ "name" : "sync", "password" : "x", "uid" : 5, "gid" : 0, "comment" : "sync", "homedir" : "/sbin", "shell" : "/bin/sync" }
{ "name" : "shutdown", "password" : "x", "uid" : 6, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin", "shell" : "/sbin/shutdown" }
rs1:PRIMARY> 

      ##db.tab.update({},{$rename:{"name":"newname"}},false,true)
       ## 更 改 所 有 行 的 字 段 名 name为newname

  ## db.tab.update({:{$gte:,$lte:}},{$set:{:"",:""}},false,true)  ##注意 false,true 的具体作用

rs1:PRIMARY> db.usertab.update({uid:{$gte:3,$lte:6}},{$set:{password:"B",shell:"No"}},false,true)
WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })

rs1:PRIMARY> db.usertab.find({uid:{$gte:3,$lte:6}},{_id:0})
{ "name" : "adm", "password" : "B", "uid" : 3, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm", "shell" : "No" }
{ "name" : "lp", "password" : "B", "uid" : 4, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd", "shell" : "No" }
{ "name" : "sync", "password" : "B", "uid" : 5, "gid" : 0, "comment" : "sync", "homedir" : "/sbin", "shell" : "No" }
{ "name" : "shutdown", "password" : "B", "uid" : 6, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin", "shell" : "No" }
rs1:PRIMARY> 
                                             ## $unset 删除与条件匹配文档的字段

rs1:PRIMARY> db.usertab.update({uid:{$gte:3,$lte:6}},{$unset:{password:1,shell:1}},false,true)
WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })
rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({uid:{$gte:3,$lte:6}},{_id:0})
{ "name" : "adm", "uid" : 3, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm" }
{ "name" : "lp", "uid" : 4, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd" }
{ "name" : "sync", "uid" : 5, "gid" : 0, "comment" : "sync", "homedir" : "/sbin" }
{ "name" : "shutdown", "uid" : 6, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin" }
rs1:PRIMARY> 
                          ##  $inc 条件匹配时，字段值自加或自减   ## $inc:{uid:-2} 注意负号 "-" 表示自减少 ;"+"表示自加  
rs1:PRIMARY> db.usertab.update({uid:{$gte:3,$lte:6}},{$inc:{uid:-2}},false,true)

WriteResult({ "nMatched" : 4, "nUpserted" : 0, "nModified" : 4 })

rs1:PRIMARY> db.usertab.find({uid:{$gte:1,$lte:5}},{_id:0})

{ "password" : "F", "shell" : "ahahaha", "uid" : 1, "name" : "bin" }
{ "name" : "daemon", "password" : "x", "uid" : 2, "gid" : 2, "comment" : "daemon", "homedir" : "/sbin", "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 1, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm" }
{ "name" : "lp", "uid" : 2, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd" }
{ "name" : "sync", "uid" : 3, "gid" : 0, "comment" : "sync", "homedir" : "/sbin" }
{ "name" : "shutdown", "uid" : 4, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin" }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.save({name:"lice",like:["a","b","c"]})

WriteResult({ "nInserted" : 1 })

rs1:PRIMARY> db.usertab.find({name:"lice"})
{ "_id" : ObjectId("5bdd5d6f70beda86affa0bc9"), "name" : "lice", "like" : [ "a", "b", "c" ] }

                                             ## $push 向数组中添加新元素

rs1:PRIMARY> db.usertab.update({name:"lice"},{$push:{like:"d"}})  #  //默认添加到最后push
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "a", "b", "c", "d" ] }

rs1:PRIMARY> db.usertab.update({name:"lice"},{$push:{like:"e"}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})

{ "name" : "lice", "like" : [ "a", "b", "c", "d", "e" ] }

rs1:PRIMARY> db.usertab.update({name:"lice"},{$push:{like:"E"}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
                                   # $pop:{x:1} 删除数组 右 边 的一个数据"E"
rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "a", "b", "c", "d", "e", "E" ] }
rs1:PRIMARY> 
                                 # $pop:{x:1} 删除数组 右 边 的一个数据"E"
rs1:PRIMARY> db.usertab.update({name:"lice"},{$pop:{like:1}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "a", "b", "c", "d", "e" ] }
rs1:PRIMARY> 

   ## $remove({}) 删除所有数据,不删除索引
   ##$pop:{x:-1} 删除左边的一个数据,  # $pop:{x:1} 删除 右 边 的一个数据
                      $pop 删除数组末尾一个元素，1删除最后一个，-1 删除第一个
                             # $pop:{x:-1} 删除数组 左 边 的一个数据 "a"
rs1:PRIMARY> db.usertab.update({name:"lice"},{$pop:{like:-1}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})

{ "name" : "lice", "like" : [ "b", "c", "d", "e" ] }
rs1:PRIMARY> 
                ## $pull 删除指定 数组元素 e

rs1:PRIMARY> db.usertab.update({name:"lice"},{$pull:{like:"e"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "b", "c", "d" ] }
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({uid:{$gt:990,$lt:995}},{_id:0}).sort({uid:1})
{ "name" : "gnome-initial-setup", "password" : "x", "uid" : 992, "gid" : 987, "comment" : "", "homedir" : "/run/gnome-initial-setup/", "shell" : "/sbin/nologin" }
{ "name" : "setroubleshoot", "password" : "x", "uid" : 993, "gid" : 990, "comment" : "", "homedir" : "/var/lib/setroubleshoot", "shell" : "/sbin/nologin" }
{ "name" : "geoclue", "password" : "x", "uid" : 994, "gid" : 991, "comment" : "User for geoclue", "homedir" : "/var/lib/geoclue", "shell" : "/sbin/nologin" }
                                         删除文档
		remove()与drop()的区别
		remove()删除文档时不删除索引
		drop()删除集合的时候同时删除索引
                                   ## $remove({}) 删除所有数据
rs1:PRIMARY> db.usertab.remove({uid:{$eq:993}})
WriteResult({ "nRemoved" : 1 })

rs1:PRIMARY> db.usertab.find({uid:{$gt:990,$lt:995}},{_id:0}).sort({uid:1})
{ "name" : "gnome-initial-setup", "password" : "x", "uid" : 992, "gid" : 987, "comment" : "", "homedir" : "/run/gnome-initial-setup/", "shell" : "/sbin/nologin" }
{ "name" : "geoclue", "password" : "x", "uid" : 994, "gid" : 991, "comment" : "User for geoclue", "homedir" : "/var/lib/geoclue", "shell" : "/sbin/nologin" }
rs1:PRIMARY> 


rs1:PRIMARY>  db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "b", "c", "d" ] }
rs1:PRIMARY> 
                                   #   $addToSet 避免重复添加
                                        ## 注意第一次添加数组元素 "w" 成功
rs1:PRIMARY> db.usertab.update({name:"lice"},{$addToSet:{like:"w"}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })#提示添加成功

rs1:PRIMARY> 
rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "b", "c", "d", "w" ] }

                                 $addToSet 避免重复添加
                                         ## 注意第 2 次添加数组元素 "w" 失败,是因为已经存在 元素 "w"
rs1:PRIMARY> db.usertab.update({name:"lice"},{$addToSet:{like:"w"}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 0 })  #提示添加失败
rs1:PRIMARY> 

rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})
{ "name" : "lice", "like" : [ "b", "c", "d", "w" ] }

rs1:PRIMARY> db.usertab.update({name:"lice"},{$addToSet:{like:"W"}})

WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })

rs1:PRIMARY> db.usertab.find({name:"lice"},{_id:0})

{ "name" : "lice", "like" : [ "b", "c", "d", "w", "W" ] }
rs1:PRIMARY> 
           ##  $inc 条件匹配时，字段值自加或自减   ## $inc:{uid:-2} 注意负号 "-" 表示自减少 ; "+"表示自加 

rs1:PRIMARY>  db.usertab.find({uid:{$gte:1,$lte:5}},{_id:0})

{ "password" : "F", "shell" : "ahahaha", "uid" : 1, "name" : "bin" }
{ "name" : "daemon", "password" : "x", "uid" : 2, "gid" : 2, "comment" : "daemon", "homedir" : "/sbin", "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 1, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm" }
{ "name" : "lp", "uid" : 2, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd" }
{ "name" : "sync", "uid" : 3, "gid" : 0, "comment" : "sync", "homedir" : "/sbin" }
{ "name" : "shutdown", "uid" : 4, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin" }

rs1:PRIMARY>                          # 注意负号 "-" 表示自减少 ; "+"表示自加  ,加号可以省略.   ## $inc:{uid:+3} 表示uid 字段值 自加 3
rs1:PRIMARY> db.usertab.update({uid:{$gte:1,$lte:5}},{$inc:{uid:+3}},false,true)

WriteResult({ "nMatched" : 6, "nUpserted" : 0, "nModified" : 6 })

rs1:PRIMARY> db.usertab.find({uid:{$gte:4,$lte:8}},{_id:0})

{ "password" : "F", "shell" : "ahahaha", "uid" : 4, "name" : "bin" }
{ "name" : "daemon", "password" : "x", "uid" : 5, "gid" : 2, "comment" : "daemon", "homedir" : "/sbin", "shell" : "/sbin/nologin" }
{ "name" : "adm", "uid" : 4, "gid" : 4, "comment" : "adm", "homedir" : "/var/adm" }
{ "name" : "lp", "uid" : 5, "gid" : 7, "comment" : "lp", "homedir" : "/var/spool/lpd" }
{ "name" : "sync", "uid" : 6, "gid" : 0, "comment" : "sync", "homedir" : "/sbin" }
{ "name" : "shutdown", "uid" : 7, "gid" : 0, "comment" : "shutdown", "homedir" : "/sbin" }
{ "name" : "halt", "password" : "x", "uid" : 7, "gid" : 0, "comment" : "halt", "homedir" : "/sbin", "shell" : "/sbin/halt" }
{ "name" : "mail", "password" : "x", "uid" : 8, "gid" : 12, "comment" : "mail", "homedir" : "/var/spool/mail", "shell" : "/sbin/nologin" }
rs1:PRIMARY> 












1、 添加 

db.users.save({name: ‘zhangsan’, age: 25, sex: true}); 

添加的数据的数据列，没有固定，根据添加的数据为准 

 

2、 修改 

db.users.update({age: 25}, {$set: {name: 'changeName'}}, false, true); 

相当于：update users set name = ‘changeName’ where age = 25; 

 

db.users.update({name: 'Lisi'}, {$inc: {age: 50}}, false, true); 

相当于：update users set age = age + 50 where name = ‘Lisi’; 

 

db.users.update({name: 'Lisi'}, {$inc: {age: 50}, $set: {name: 'hoho'}}, false, true); 

相当于：update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’; 

 

3、 删除 

db.users.remove({age: 132}); 

 

4、 查询修改删除 

db.users.findAndModify({ 

    query: {age: {$gte: 25}}, 

    sort: {age: -1}, 

    update: {$set: {name: 'a2'}, $inc: {age: 2}}, 

    remove: true 

}); 

 

db.runCommand({ findandmodify : "users", 

    query: {age: {$gte: 25}}, 

    sort: {age: -1}, 

    update: {$set: {name: 'a2'}, $inc: {age: 2}}, 

    remove: true 

}); 

参数 详解 默认值 

query 查询过滤条件 {} 

sort 如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作 {} 

remove 若为true，被选中对象将在返回前被删除 N/A 

update 一个 修改器对象 N/A 

new 若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。 false 

fields 参见Retrieving a Subset of Fields (1.5.0+) 

All fields 

upsert 创建新对象若查询结果为空。 示例 (1.5.4+) 

false 

 

语句块操作 

1、 简单Hello World 

print("Hello World!"); 

这种写法调用了print函数，和直接写入"Hello World!"的效果是一样的； 

 

2、 将一个对象转换成json 

tojson(new Object()); 

tojson(new Object('a')); 

 

3、 循环添加数据 

> for (var i = 0; i < 30; i++) { 

... db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2}); 

... }; 

这样就循环添加了30条数据，同样也可以省略括号的写法 

> for (var i = 0; i < 30; i++) db.users.save({name: "u_" + i, age: 22 + i, sex: i % 2}); 

也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息； 

 

4、 find 游标查询 

>var cursor = db.users.find(); 

> while (cursor.hasNext()) { 

    printjson(cursor.next()); 

} 

这样就查询所有的users信息，同样可以这样写 

var cursor = db.users.find(); 

while (cursor.hasNext()) { printjson(cursor.next); } 

同样可以省略{}号 

 

5、 forEach迭代循环 

db.users.find().forEach(printjson); 

forEach中必须传递一个函数来处理每条迭代的数据信息 

 

6、 将find游标当数组处理 

var cursor = db.users.find(); 

cursor[4]; 

取得下标索引为4的那条数据 

既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count(); 

那样我们也可以用循环显示数据 

for (var i = 0, len = c.length(); i < len; i++) printjson(c[i]); 

 

7、 将find游标转换成数组 

> var arr = db.users.find().toArray(); 

> printjson(arr[2]); 

用toArray方法将其转换为数组 

 

8、 定制我们自己的查询结果 

只显示age <= 28的并且只显示age这列数据 

db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson); 

db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson); 

排除age的列 

db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson); 

 

9、 forEach传递函数显示信息 

db.things.find({x:4}).forEach(function(x) {print(tojson(x));}); 

上面介绍过forEach需要传递一个函数，函数会接受一个参数，就是当前循环的对象，然后在函数体重处理传入的参数信息。 


[root@H54 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1977
child process started successfully, parent exiting
[root@H54 ~]# vim txt.txt
[root@H54 ~]# cat txt.txt
show dbs
db
exit
[root@H54 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.54:27054/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H54 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.54:27054      0.0.0.0:*               LISTEN      1977/mongod         
[root@H54 ~]# 








[root@H55 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1977
child process started successfully, parent exiting
[root@H55 ~]# vim txt.txt
[root@H55 ~]# cat txt.txt
show dbs
db
exit
[root@H55 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.55:27055/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H55 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.55:27055      0.0.0.0:*               LISTEN      1977/mongod         
[root@H55 ~]# 






[root@H56 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 1989
child process started successfully, parent exiting
[root@H56 ~]# vim txt.txt
[root@H56 ~]# cat txt.txt
show dbs
db
exit
[root@H56 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.56:27056/
MongoDB server version: 3.6.3
admin   0.000GB
config  0.000GB
local   0.000GB
test
bye
[root@H56 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.56:27056      0.0.0.0:*               LISTEN      1989/mongod         
[root@H56 ~]# 





[root@H57 ~]# mkdir -p /usr/local/mongodb/{data/db,etc,log}
[root@H57 ~]# ls mongodb-linux-x86_64-rhel70-3.6.3/
bin  GNU-AGPL-3.0  MPL-2  README  THIRD-PARTY-NOTICES
[root@H57 ~]# cp -r mongodb-linux-x86_64-rhel70-3.6.3/bin/  /usr/local/mongodb/
[root@H57 ~]# ls /usr/local/mongodb/
bin  data  etc  log
[root@H57 ~]# ls  /usr/local/mongodb/bin/
bsondump         mongo   mongodump    mongofiles   mongoperf    mongorestore  mongostat
install_compass  mongod  mongoexport  mongoimport  mongoreplay  mongos        mongotop
[root@H57 ~]# ls /usr/local/mongodb/data/db/
[root@H57 ~]# vim /usr/local/mongodb/etc/mongodb.conf
[root@H57 ~]# cat /usr/local/mongodb/etc/mongodb.conf
logpath=/usr/local/mongodb/log/mongodb.log
logappend=true
dbpath=/usr/local/mongodb/data/db
fork=true
port=27057
bind_ip=192.168.4.57
[root@H57 ~]# vim /root/.bashrc 
[root@H57 ~]# head -4 /root/.bashrc
# .bashrc
alias mstart="/usr/local/mongodb/bin/mongod  -f  /usr/local/mongodb/etc/mongodb.conf"
alias mstop="/usr/local/mongodb/bin/mongod --shutdown -f /usr/local/mongodb/etc/mongodb.conf"
alias linkm127='/usr/local/mongodb/bin/mongo --host 192.168.4.57 --port 27057'
[root@H57 ~]# alias mstart="/usr/local/mongodb/bin/mongod  -f  /usr/local/mongodb/etc/mongodb.conf"
[root@H57 ~]# alias mstop="/usr/local/mongodb/bin/mongod --shutdown -f /usr/local/mongodb/etc/mongodb.conf"
[root@H57 ~]# alias linkm127='/usr/local/mongodb/bin/mongo --host 192.168.4.57 --port 27057'

[root@H57 ~]# vim /etc/profile  设置PATH变量

[root@H57 ~]# tail -2 /etc/profile
unset -f pathmunge
export PATH=/usr/local/mongodb/bin/:$PATH
[root@H57 ~]# source  /etc/profile   设置PATH变量

[root@H57 ~]# mongo
mongo         mongodump     mongofiles    mongoperf     mongorestore  mongostat
mongod        mongoexport   mongoimport   mongoreplay   mongos        mongotop
[root@H57 ~]# mongod -h |grep "\-\-shutdown"
  --shutdown                            kill a running server (for init 
[root@H57 ~]# ps -C mongod
  PID TTY          TIME CMD
[root@H57 ~]# mstart
about to fork child process, waiting until server is ready for connections.
forked process: 2024
child process started successfully, parent exiting
[root@H57 ~]# ps -C mongod
  PID TTY          TIME CMD
 2024 ?        00:00:00 mongod
[root@H57 ~]# linkm127 < "show dbs\n db\n exit\n" |tail -9
-bash: show dbs\n db\n exit\n: 没有那个文件或目录
[root@H57 ~]# vim txt.txt
[root@H57 ~]# cat txt.txt
show dbs
db
exit
[root@H57 ~]# linkm127 < txt.txt |tail -9
MongoDB shell version v3.6.3
connecting to: mongodb://192.168.4.57:27057/
MongoDB server version: 3.6.3
admin  0.000GB
local  0.000GB
test
bye
[root@H57 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.57:27057      0.0.0.0:*               LISTEN      2024/mongod         
[root@H57 ~]# mstop 
killing process with pid: 2024
[root@H57 ~]# mstart 
about to fork child process, waiting until server is ready for connections.
forked process: 2129
child process started successfully, parent exiting
[root@H57 ~]# netstat -anpult |grep mongod
tcp        0      0 192.168.4.57:27057      0.0.0.0:*               LISTEN      2129/mongod         
[root@H57 ~]# 
      
[root@H57 ~]# ls /usr/local/mongodb/data/db/
collection-0-5309460313143735180.wt  index-2-5868180045259884563.wt  storage.bson
collection-0-5868180045259884563.wt  index-3-5309460313143735180.wt  WiredTiger
collection-2-5309460313143735180.wt  journal                         WiredTigerLAS.wt
diagnostic.data                      _mdb_catalog.wt                 WiredTiger.lock
index-1-5309460313143735180.wt       mongod.lock                     WiredTiger.turtle
index-1-5868180045259884563.wt       sizeStorer.wt                   WiredTiger.wt
[root@H57 ~]# ls /usr/local/mongodb/log/
mongodb.log
[root@H57 ~]# ls /usr/local/mongodb/etc/
mongodb.conf
[root@H57 ~]# 







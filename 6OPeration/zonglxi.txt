


[root@VM1 ~]# yum -y install expect
[root@VM1 ~]# rpm -q expect
expect-5.45-14.el7_1.x86_64
[root@VM1 ~]# which expect
/usr/bin/expect

Linux expect介绍和用法

expect中最关键的四个命令是send,expect,spawn,interact 
send：用于向进程发送字符串 
expect：从进程接收字符串 
spawn：启动新的进程 
interact：允许用户交互
expect中没有小括号（）,所有的if/else, while, for的条件全部使用大括号{}, 并且{ 与左边要
有空格，否则会报错。另，else 不能单独占一行，否则会报错。


1.#!/usr/bin/expect ：需要先安装软件，然后来说明用expect来执行

2.spawn ssh root@192.168.43.131 ：spawn是进入expect环境后才可以执行的expect内部命令，用来执行它后面的命令。

3.expect "*password:" ：也是expect的内部命令，用来解惑关键的字符串，如果有，就会立即返回下面设置的内容，如果没有就看是否设置了超时时间。

4.send "123\r"：这时执行交互式动作，与手工输入密码等效，在expect截获关键字之后，它就会输入send后面的内容。

5.interact ：执行完毕后把持交互状态，把控制台，这时候就可以进行你想要进行的操作了。如果没有这一句，在登陆完成之后就会退出，而不是留在远程终端上。

       echo[OPTION]... [STRING]...
       -n 不输出行尾的换行符.
       -e 允许对下面列出的加反斜线转义的字符进行解释.
        \n    换行符
        \r    回车符
        \t    水平制表符
        \v    纵向制表符

[root@room2pc18 ~]# virsh console VM1
连接到域 VM1
换码符为 ^]

root
密码：
Last login: Wed Sep 19 18:54:03 on ttyS0
[root@VM1 ~]# 


[root@room2pc18 ~]# tail -1 /etc/fstab
/var/lib/libvirt/images/iso/rhel-server-7.4-x86_64-dvd.iso  /var/ftp/rhel7 iso9660 defaults 0 0






[root@DB70 ~]# vim /etc/profile  
[root@DB70 ~]# tail -1 /etc/profile
export  PATH=/usr/local/mysql/bin:$PATH

[root@DB70 ~]# source /etc/profile
[root@DB70 ~]# echo $PATH
/usr/local/mysql/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin
/***export -n 全局变量名x 取消指定的变量的全局属性

[root@DB70 ~]# ll /usr/local/mysql/bin/mysqld_multi  
-rwxr-xr-x. 1 7161 31415 26738 9月  14 2017 /usr/local/mysql/bin/mysqld_multi
[root@DB70 ~]# mysqld_multi start 1
[root@DB70 ~]# mysqld_multi start 2

[root@VM1 ~]# echo $$ 当前运行的进程PID号
1354
[root@VM2 ~]# echo $! # 表示最后一个进程的内置变量$!
4024
[root@VM1 ~]# echo $0 当前所在的进程或脚本名
-bash
[root@VM1 ~]# yum repolist |grep '^repolist'
repolist: 9,972
[root@VM1 ~]# yum repolist |awk '/^repolist/{print $2}'
9,972
[root@VM1 ~]# yum repolist |awk '/^repolist/{print $2}'|sed 's/,//g'
9972
[root@VM1 ~]# find / -name "init*" -type f
[root@VM2 ~]# uptime
 10:40:29 up  1:55,  1 user,  load average: 0.00, 0.01, 0.05
[root@VM2 ~]# top
top - 10:40:34 up  1:55,  1 user,  load average: 0.00, 0.01, 0.05
Tasks: 107 total,   1 running, 106 sleeping,   0 stopped,   0 zombie
%Cpu(s):  5.6 us, 11.1 sy,  0.0 ni, 83.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  1016252 total,   619768 free,   143528 used,   252956 buff/cache
KiB Swap:  2097148 total,  2097148 free,        0 used.   684468 avail Mem 
[root@VM2 ~]# ifconfig eth0 |awk '/RX p/{print $5}'
276525
[root@VM2 ~]# ifconfig eth0 |awk '/RX p/{print $0}'
        RX packets 4328  bytes 278919 (272.3 KiB)
[root@VM2 ~]# free
              total        used        free      shared  buff/cache   available
Mem:        1016252      143092      619880        7152      253280      684896
Swap:       2097148           0     2097148
[root@VM2 ~]# free |awk '/Mem/{print $4}'
619476
[root@VM2 ~]# ifconfig eth0 |awk '/TX p/{print $0}'
        TX packets 302  bytes 42573 (41.5 KiB)
[root@VM2 ~]# free |awk '/Mem/{print $4}'
619476
[root@VM2 ~]# awk '/Failed password/{print $11}' /var/log/secure 
[root@VM2 ~]# awk '/password/{print $11}' /var/log/secure 
root
password

keyring
192.168.4.254
192.168.4.7
192.168.4.7
[root@VM2 ~]# awk '/Invalid/{print $11}' /var/log/secure
[root@VM2 ~]# sleep 100 &
[1] 4013
[root@VM2 ~]# jobs
[1]+  运行中               sleep 100 &
[root@VM2 ~]# sleep 120 &
[2] 4014
[root@VM2 ~]# echo $!
4014
[root@VM2 ~]# sleep 111 &
[3] 4024
[root@VM2 ~]# echo $! # 表示最后一个进程的内置变量$!
4024
[root@VM2 ~]# kill 4024
[1]   完成                  sleep 100
[root@VM2 ~]# echo $!
4024
[3]+  已终止               sleep 111
[root@VM2 ~]# kill $!
-bash: kill: (4024) - 没有那个进程
[root@VM2 ~]# echo $!
4024
[root@VM2 ~]# killall sleep
[2]+  完成                  sleep 120



expect是建立在tcl基础上的一个工具，它用来让一些需要交互的任务自动化地完成。


因为expect是基于tcl的，所以需要你的系统中安装有tcl
如何检查？
[root@dev ~]# whereis tcl
tcl: /usr/lib/tcl8.4 /usr/share/tcl8.4
如果看不到结果，请先安装tcl


安装


> 安装tcl
解压tcl安装包后
cd tcl8.4.11/unix/
./configure --prefix=/usr/local/tcl/ --enable-shared
make && make install


> 安装expect
解压expect安装包后
cd expect-5.43
./configure --prefix=/usr/local/expect/ --with-tcl=/usr/local/tcl/lib/ --with-tclinclude=/opt/tcl8.4.11/generic/ --enable-shared
make && make install
注意：指定的/opt/tcl8.4.11/generic/ 为我们上面解压的tcl目录


> 创建连接符号
ln -s /usr/local/expect/bin/expect /usr/bin/expect
> 查看连接符号
ls -l /usr/bin/expect
lrwxrwxrwx. 1 root root 28 9月   8 11:21 /usr/bin/expect -> /usr/local/expect/bin/expect
这个符号链接将在编写expect脚本文件时用到，例如在expect文件头部会指定用于执行该脚本的shell 
#!/usr/bin/expect 


> 测试
[root@localhost opt]# expect
expect1.1> exit
[root@localhost opt]# 
这样就可以开始运行expect脚本了。

2. ［set timeout 30］ 
基本上认识英文的都知道这是设置超时时间的，现在你只要记住他的计时单位是：秒。timeout -1 为永不超时，默认情况下，timeout是10秒；

6. ［interact］ 
执行完成后保持交互状态，把控制权交给控制台，这个时候就可以手工操作了。如果没有这一句登录完成后会退出，而不是留在远程终端上。如果你只是登录过去执行 


8. send和send_user
send会将expect脚本中需要的信息发送给spawn启动的那个进程，而send_user只是回显用户发出的信息，类似于shell中的echo而已。

使用exp_continue后，会重新从当前expect块的开始重新执行，可以简单理解问while循环的continue



  202.96.128.86

[root@room2pc18 ~]# cat /etc/resolv.conf 
# Generated by NetworkManager
search tedu.cn
nameserver 176.121.0.100


[root@VM2 ~]# [root@VM1 ~]# cat expect.sh 
#!/usr/bin/expect
expect << EOF
set timeout 30
spawn ssh -X root@192.168.4.$1
expect {
   "password:" {
    send "123\r";
   }
    "(yes/no)?" {
    send "yes\n";exp_continue
   }
}
expect "#" {send "mkdir /expectvm2\r"}
expect "#" {send "exit\r"}
EOF


13302381235



错题

(不定项选择)awk使用什么设置读取文件前执行的指令?

A:END{}
B:BEGIN()
C:START{}
D:BEGIN{}
正确答案:D
你的回答:BD

(不定项选择)A && B || C,什么时候会执行C命令？

A:A执行，但失败时
B:B执行，但失败时
C:A执行失败，B执行成功时
D:A执行成功，B执行成功时
正确答案:AB
你的回答:ABD

(多选)sed可以通过操作指令对文件进行增、删、改、查的操作，下列哪些指令是sed支持的?

A:p打印
B:s字符串替换
C:a 行后插入  i 行前插入  c替换当前行
D:d 删除行
正确答案:ABCD
你的回答:ABC
sed '2r m.txt' reg.txt
在第二行下插入导入文件 m.txt

sed -n '1,2w c.txt' reg.txt
把第一第二行导出写入文件 c.txt


(多选)使用expect可以实现哪些命令的自动交互?

A:mkdir
B:ssh
C:useradd
D:fdisk
正确答案:BD
你的回答:ABCD

(不定项选择)反引号中可以放什么内容？

A:任意字符
B:数字
C:文件
D:命令
正确答案:D
你的回答:CD

(单选)下列说法错误的是？

A:if语句分为单分支、双分支和多分支
B:if语句可以没有then，但必须有else
C:if语句可以没有else，但必须有then
D:if语句必须以fi结尾
正确答案:B
你的回答:ACD 




1807nsd







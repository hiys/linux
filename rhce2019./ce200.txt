

[root@room9pc27 ~]# virsh  net-list  |grep  rhce
 rhce                 活动     是           是
[root@room9pc27 ~]# ifconfig  rhce |grep -A2 "flags=" ;
                    ifconfig  rhce:0 |grep -A2 "flags="

rhce: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.254.250  netmask 255.255.255.0  broadcast 172.25.254.255
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)
rhce:0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.250  netmask 255.255.0.0  broadcast 172.25.255.255
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)
[root@room9pc27 ~]# 


[root@room9pc27 ~]# which  clone-auto7
/usr/local/bin/clone-auto7

[root@room9pc27 ~]# ls   /usr/local/bin/
2to3         clone-vm          idle3.6   python3            python3-config
2to3-3.6     clone-vm6         pip3      python3.6          pyvenv
charm        clone-vm7         pip3.6    python3.6-config   pyvenv-3.6
clone-auto6  easy_install-3.6  pydoc3    python3.6m         rht-vmctl
clone-auto7  idle3             pydoc3.6  python3.6m-config


[root@room9pc27 ~]# rht-vmctl   --help
 Usage: rht-vmctl  VMCMD   VMNAME  
  where VMCMD is one of:
    start      - obtain and start up VMNAME
    stop       - stop a running VMNAME
    poweroff   - if running, force stop VMNAME
    reset      - poweroff, return to saved or original state, start VMNAME
    status     - display libvirt status of VMNAME 
  where VMNAME is one of: 
    classroom
    server
    desktop 
[root@room9pc27 ~]# rht-vmctl    reset   classroom
classroom [OK]
域 classroom 已开始

[root@room9pc27 ~]# rht-vmctl    reset   server
server [OK]
域 server 已开始

[root@room9pc27 ~]# rht-vmctl    reset   desktop
desktop [OK]
域 desktop 已开始

[root@room9pc27 ~]# 

[root@room9pc27 ~]# cat  ReadMe.txt 
RHCSA评分脚本:
	教学环境下，在真机解压，server开机时执行./rht-checkcsa.py。按两下回车即可。


Functions:
	Input(1):         check_all        完整测试(测试所有项)
	Input(ENTER):     check_no_user    部分测试(不包含用户密码的验证)
	!!!测试用户密码采用expect方式，比较慢，不建议使用

Files：
 	rht-checkcsa.py --> 主文件 
	.checkcsa 		--> 检测脚本

ISSUE:
1、网络配置检查标准（命令配置），手工写文件的会失败 
2、主机名必须修改，默认配置会检查失败.
3、用户权限，必须先添加组（先添加的组号为1001，这里检查组号），再添加用户.
4、如果检查用户口令，请不要做其他操作（采用expect方式，输入无关内容可能导致检测失败）.

Versions:
2.0	基本功能完成.
2.1	增加颜色显示(正确:绿色，错误:红色),调整check_stu_f()、check_str()、check_tar()逻辑，
检测到一个文件不符合就报错(不再列出所有不符合条件的文件).
2.2	增加tar包压缩方式检测，必须能够使用tar jxf 命令解压.
2.3	调整判断机制，/etc/gshadow不在时，去判断/etc/gshadow-(配置ldapuser0后会导致/etc/gshadow 消失，
导致用户组检测失败,但会产生 /etc/gshadow-)
2.4	修复find文件时只提示扣分，但未进行统计。


[root@room9pc01 ~]# rm -rf /content/
[root@room9pc01 ~]# cp -rpf /var/lib/libvirt/images/content/  /

[root@room9pc27 ~]# ls /content/
content  courses  lost+found  rhel7.0

[root@room9pc27 ~]# ls  /var/lib/libvirt/images/content/
content  courses  lost+found  rhel7.0

[root@room9pc27 ~]# ls /content/courses/
rh124  rh134  rh199  rh254  rh299  rhce

[root@room9pc27 ~]# ls /content/content/

[root@room9pc01 ~]# systemctl restart nfs-server.service 

[root@room9pc27 ~]# ifconfig rhce   |grep  -A2  "flags=" ;ifconfig  rhce:0  |grep  -A2  "flags="
rhce: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.254.250  netmask 255.255.255.0  broadcast 172.25.254.255
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)

rhce:0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.250  netmask 255.255.0.0  broadcast 172.25.255.255
        ether 52:54:00:45:6a:61  txqueuelen 1000  (Ethernet)

[root@room9pc27 ~]# systemctl  is-active   nfs-server
active
[root@room9pc27 ~]# showmount   -e
Export list for room9pc27.tedu.cn:
/content 172.25.254.0/24
[root@room9pc27 ~]# cat  /etc/exports
/content/  172.25.254.0/24(ro)

[root@room9pc27 ~]# systemctl  is-enabled   nfs-server.service 
enabled

=====================cex200============================
[root@room9pc01 ~]# tar -xPf /root/桌面/checkcsa-2.4.0.tar.gz 
[root@room9pc27 ~]# tar  -xPf   checkcsa-2.4.0.tar.gz 

[root@room9pc01 ~]# tar -tPf /root/桌面/checkcsa-2.4.0.tar.gz
rht-checkcsa.py
checkcsa.py
.checkcsa
ReadMe.txt
[root@room9pc01 ~]# chmod +x rht-checkcsa.py
[root@room9pc01 ~]# ls -l rht-checkcsa.py
-rwxr-xr-x 1 root root 874 12月  5 2017 rht-checkcsa.py
==============cex300====================================
[root@room9pc01 ~]# tar -xPf /root/桌面/rht-labcheck.tar.gz 
[root@room9pc01 ~]# tar -xPf /root/桌面/lab2.tar.gz 
[root@room9pc01 ~]# tar -tPf /root/桌面/rht-labcheck.tar.gz
/usr/local/sbin/.server0.sh
/usr/local/sbin/.desktop0.sh
/usr/local/sbin/rht-labcheck
[root@room9pc01 ~]# tar -tPf /root/桌面/lab2.tar.gz 

--------------------------- 检测成绩  -----------------------------------
[root@room9pc27 ~]# chmod  a+x  rht-checkcsa.py
[root@room9pc27 ~]# chmod  a+x  checkcsa.py   #检测脚本
[root@room9pc27 ~]# ll  checkcsa.py  rht-checkcsa.py
-rwxr-xr-x 1 root root 22103 12月  5 2017 checkcsa.py
-rwxr-xr-x 1 root root   874 12月  5 2017 rht-checkcsa.py
RHCSA评分脚本:
	教学环境下，在真机解压，server开机时执行./rht-checkcsa.py。按两下回车即可。
-----------------------------  server开机时执行./rht-checkcsa.py -------------

Functions:
	Input(1):         check_all        完整测试(测试所有项)
	Input(ENTER):     check_no_user    部分测试(不包含用户密码的验证)
	!!!测试用户密码采用expect方式，比较慢，不建议使用

Files：
 	rht-checkcsa.py --> 主文件 
	.checkcsa 		--> 检测脚本
==================正式开考==========================


--------------------  00a、重设 root 密码  ------------------------------

1)重启虚拟机 server,出现 GRUB 启动菜单时按 e 键进入编辑状态
2)找到 linux16 所在行, LANG=en_US.UTF-8 末尾
                                 添加 rd.break console=tty0,
   按 Ctrl+x 键 进入 恢复模式
3)以可写方式挂载硬盘中的根目录,并重设 root 密码:

-----------------  //以可读写方式重新挂载根系统  ----------------------
switch_root:/# mount  -o   remount,rw  /sysroot

---------------- //切换到临时根系统  /sysroot/------------ 
switch_root:/# chroot   /sysroot/

 ---------交互式  将系统的 root 账号密码设置为 redhat  //设置考试指定的密码------------
sh-4.2# passwd  root
   输入密码 redhat   回车确认

/***************
   --------- 非 交互式  将系统的 root 账号密码设置为 redhat ------------
输入命令 echo redhat  |passwd  --stdin  root  回车确认
注意若出现乱码,直接 Ctrl + c  结束当前命令,等到显示
sh-4.2# 再接着 设置密码
输入命令 echo redhat  |passwd  --stdin  root  回车确认
***************/

--------------------  //标记下一次启动重做 SELinux 标签  ----------------
sh-4.2# touch  /.autorelabel
sh-4.2# exit
switch_root:/#reboot




考试说明

为了能够继续考试，您必须首先完成下述任务。

将系统的 root 账号密码设置为 redhat 。
配置您的虚拟机系统使用下述静态网络配置：
 * Hostname：server0.example.com
 * IP address：172.25.0.11
 * Netmask：255.255.255.0
 * Gateway：172.25.0.254
 * Name server：172.25.254.254

您必须完成对网络的修改，这样才能访问其余的考题，一旦您完成了上述修改，点击下面的URL地址：http://rhgls.domain254.example.com/exam/ex200/index2.html

如果您已经成功完成了初始的题目，您将被重定向到考试的其余部分。

防火墙默认是打开的，在您认为是适当的时候可以关闭。
在评分之前您的系统会被重新启动，
所以请您确保您所做的所有修改和服务配置在重新启动之后仍然能够生效，而无需人工干预。

所有考试用的虚拟机实例必须能重启之后进入正确的用户级别，而无需人工协助。
如果考试用的虚拟机不能启动或不能正常启动，将被评零分。

您在考试中使用的Red Hat Enterprise Linux操作系统版本对应的分发包
可以通过YUM在下面的链接中找到：http://content.example.com/rhel7.0/x86_64/dvd

注意一些考试题目可能依赖于其他考试题目。
比如说，在考试题目中可能要求您针对一个用户执行一系列的限制，
但是这个用户的创建可能是在其他题目中要求的。

为了方便您的标识，每个考试题目都有一些选取按钮
以协助您去标识哪个题目您已经完成了，哪些还没有。
当然，如果您觉得用不着，您也可以不去理会这些按钮。
----------------------------------------------------------------------------


-------------- 00b、配置主机名、IP 地址/掩码/默认网关/DNS 地址

将系统的 root 账号密码设置为 redhat 。
配置您的虚拟机系统使用下述静态网络配置：
 * Hostname：server0.example.com
 * IP address：172.25.0.11
 * Netmask：255.255.255.0
 * Gateway：172.25.0.254
 * Name server：172.25.254.254


[root@room9pc27 ~]# virsh  console  server
连接到域 server
换码符为 ^]


Red Hat Enterprise Linux Server 7.0 (Maipo)
Kernel 3.10.0-123.el7.x86_64 on an x86_64

server0 login: root
Password: redhat
Last login: Fri Jan 12 18:54:14 from 172.25.0.250

[root@server0 ~]# echo  redhat  |passwd  --stdin  root
Changing password for user root.
passwd: all authentication tokens updated successfully.

         -------------------  配置主机名  -------------------------

[root@server0 ~]# hostnamectl   set-hostname   server0.example.com
[root@server0 ~]# hostname
server0.example.com

[root@server0 ~]# cat  /etc/hostname 
server0.example.com

[root@server0 ~]# nmcli 
connection  device      general     help        networking  radio


[root@server0 ~]# nmcli  device   status
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 
eth1    ethernet  disconnected  --          
eth2    ethernet  disconnected  --          
lo      loopback  unmanaged     --    

[root@server0 ~]# ifconfig |grep  -A2  flags=
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
......................
-------------------------  配置 IP 地址/掩码 /默认网关 /DNS 地址  -----------------

[root@server0 ~]# nmcli   connection  modify  "System eth0"  \
> ipv4.method manual          \
> ipv4.addresses  "172.25.0.11/24   172.25.0.254"  \
> ipv4.dns  172.25.254.254    \
> connection.autoconnect  yes

     ---------------------------  激活 配置  ---------------------------------------

[root@server0 ~]# nmcli  connection   up  "System eth0" 

Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/1)

[root@server0 ~]# nmcli  connection  show
NAME         UUID                                  TYPE            DEVICE 
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  802-3-ethernet  eth0   

[root@server0 ~]# nmcli  device  status
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 
eth1    ethernet  disconnected  --          
eth2    ethernet  disconnected  --          
lo      loopback  unmanaged     --   
       
[root@server0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@server0 ~]# ip  route  show
default via 172.25.0.254 dev eth0  proto static  metric 1024 
172.25.0.0/24 dev eth0  proto kernel  scope link  src 172.25.0.11 

[root@server0 ~]# ifconfig  |grep  "inet "
        inet 172.25.0.11  netmask 255.255.255.0  broadcast 172.25.0.255
        inet 127.0.0.1  netmask 255.0.0.0

[root@server0 ~]# ifconfig  | head  -2
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.11  netmask 255.255.255.0  broadcast 172.25.0.255

[root@server0 ~]# cat   /etc/sysconfig/network-scripts/ifcfg-eth0 

DEVICE=eth0
BOOTPROTO=none
ONBOOT=yes
TYPE=Ethernet
USERCTL=yes
IPV6INIT=no
PERSISTENT_DHCLIENT=1
IPADDR0=172.25.0.11
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
NAME="System eth0"
UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03

[root@server0 ~]# nmcli  connection   show
NAME         UUID                                  TYPE            DEVICE 
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  802-3-ethernet  eth0  
 
[root@server0 ~]# nmcli  connection  show   "System eth0"
connection.id:                          System eth0
connection.uuid:                        5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03
connection.interface-name:              eth0
connection.type:                        802-3-ethernet
connection.autoconnect:                 yes
.....................
ipv4.method:                            manual
ipv4.dns:                               172.25.254.254
........
ipv4.addresses:                         { ip = 172.25.0.11/24, gw = 172.25.0.254 }
....................
GENERAL.名称:                           System eth0
GENERAL.UUID:                           5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03
GENERAL.设备:                           eth0
GENERAL.状态:                           已激活
..............
IP4.地址[1]:                            ip = 172.25.0.11/24, gw = 172.25.0.254
IP4.DNS[1]:                             172.25.254.254
IP6.地址[1]:                            ip = fe80::5054:ff:fe00:b/64, gw = ::

[root@server0 ~]# 


/***********  general  adj.普遍的;大致的;综合的;总的，全体的
n.一般;常规;上将;一般原则
***********/


[root@server0 ~]# reboot


[root@room9pc27 ~]# ssh  -o  StrictHostKeyChecking=no  -X  root@172.25.0.11
...................
[root@server0 ~]# hostname
server0.example.com

[root@server0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@server0 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.25.0.254    0.0.0.0         UG    1024   0        0 eth0
172.25.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@server0 ~]# ifconfig  |awk  '/inet /{print  $2}'
172.25.0.11
127.0.0.1

[root@server0 ~]# ifconfig  |head  -2
eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 172.25.0.11  netmask 255.255.255.0  broadcast 172.25.0.255


[root@server0 ~]# ping  -c2  172.25.254.254    #dns服务器
PING 172.25.254.254 (172.25.254.254) 56(84) bytes of data.
64 bytes from 172.25.254.254: icmp_seq=1 ttl=64 time=0.511 ms
64 bytes from 172.25.254.254: icmp_seq=2 ttl=64 time=0.659 ms
................
[root@server0 ~]# ping  -c2  172.25.0.254     # 网关gateway
PING 172.25.0.254 (172.25.0.254) 56(84) bytes of data.
64 bytes from 172.25.0.254: icmp_seq=1 ttl=64 time=0.440 ms
64 bytes from 172.25.0.254: icmp_seq=2 ttl=64 time=0.644 ms
................
[root@server0 ~]# 
--------------------------------------------------------------------------------------
--------------------------------  desktop0.example.com -----------------

[root@room9pc27 ~]# virsh  console  desktop
连接到域 desktop
换码符为 ^]


Red Hat Enterprise Linux Server 7.0 (Maipo)
Kernel 3.10.0-123.el7.x86_64 on an x86_64

desktop0 login: root
Password: redhat
Last login: Fri Jan 12 18:54:00 from 172.25.0.250

[root@desktop0 ~]# echo  redhat  |passwd  --stdin  root
Changing password for user root.
passwd: all authentication tokens updated successfully.

[root@desktop0 ~]# hostnamectl  set-hostname   desktop0.example.com

[root@desktop0 ~]# hostname
desktop0.example.com

[root@desktop0 ~]# cat  /etc/hostname
desktop0.example.com

[root@desktop0 ~]# nmcli  device   status 
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 
eth1    ethernet  disconnected  --          
eth2    ethernet  disconnected  --          
lo      loopback  unmanaged     --          

     --------------  显示所有活动连接 -------------- -------

[root@desktop0 ~]# nmcli  connection  show  --active 
NAME         UUID                                  TYPE            DEVICE 
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  802-3-ethernet  eth0 
  
[root@desktop0 ~]# nmcli  connection  show 
NAME         UUID                                  TYPE            DEVICE 
System eth0  5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03  802-3-ethernet  eth0  
 
/***************
添加DNS
# nmcli connection modify eth0 ipv4.dns 114.114.114.114

删除DNS
# nmcli connection modify eth0 -ipv4.dns 114.114.114.114

添加一个网关（GATEWAY）
 # nmcli connection modify eth0 ipv4.gateway 192.168.0.2

可一块写入：
nmcli connection modify eth0 ipv4.dns 114.114.114.114 ipv4.gateway 192.168.0.2
*****************/


[root@desktop0 ~]# nmcli  device  status
DEVICE  TYPE      STATE         CONNECTION  
eth0    ethernet  connected     System eth0 
eth1    ethernet  disconnected  --          
eth2    ethernet  disconnected  --          
lo      loopback  unmanaged     --   
  
  ---------------------- ------------  删除一个网卡连接  ------------------------------
------ # nmcli   connection   delete   "连接名CONNECTION(不是 设备名DEVICE)" ---

[root@desktop0 ~]# nmcli   connection   delete   "System eth0" 
[root@desktop0 ~]# nmcli  device  status
DEVICE  TYPE      STATE         CONNECTION 
eth0    ethernet  disconnected  --         
eth1    ethernet  disconnected  --         
eth2    ethernet  disconnected  --         
lo      loopback  unmanaged     --         
[root@desktop0 ~]# 


[root@desktop0 ~]# nmcli   connection  add 
autoconnect  con-name     help         ifname       type 

[root@desktop0 ~]# nmcli  connection  add  type 
bluetooth     bridge-slave  infiniband    team-slave    wimax
bond          cdma          olpc-mesh     vlan          
bond-slave    ethernet      pppoe         vpn           
bridge        gsm           team          wifi  

[root@desktop0 ~]# nmcli   connection  add ifname 
eth0  eth1  eth2  lo    

----------------- 添加一个网卡连接 ---------------------
-- # nmcli connection add type ethernet con-name 连接名 ifname 设备名 -----
# nmcli  connection  add  type ethernet  con-name  "System eth0"   ifname  eth0

----------------- 添加一个网卡连接 -----------------

[root@desktop0 ~]# nmcli   connection  add   type  ethernet  \
> con-name  "System eth0"  ifname  eth0

Connection 'System eth0' (6f55a10a-37f9-45f2-9b42-88a62937cce4) successfully added.

[root@desktop0 ~]# nmcli  connection show
NAME         UUID                                  TYPE            DEVICE 
System eth0  6f55a10a-37f9-45f2-9b42-88a62937cce4  802-3-ethernet  eth0  

-------------------------  配置 IP 地址/掩码 /默认网关 /DNS 地址  -----------------

[root@desktop0 ~]# nmcli   connection  modify  "System eth0"  \
> ipv4.method manual          \
> ipv4.addresses  "172.25.0.10/24   172.25.0.254"  \
> ipv4.dns  172.25.254.254    \
> connection.autoconnect  yes

[root@desktop0 ~]# nmcli  connection  up  "System eth0"  #启用网络接口的连接

Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/3)

[root@desktop0 ~]# nmcli  connection   show  "System eth0"
connection.id:                          System eth0
connection.uuid:                        6f55a10a-37f9-45f2-9b42-88a62937cce4
connection.interface-name:              eth0
connection.type:                        802-3-ethernet
connection.autoconnect:                 yes
..............
IP4.ADDRESS[1]:                         ip = 172.25.0.10/24, gw = 172.25.0.254
IP4.DNS[1]:                             172.25.254.254
IP6.ADDRESS[1]:                         ip = fe80::5054:ff:fe00:a/64, gw = ::
[root@desktop0 ~]# ifconfig  |grep  'inet '
        inet 172.25.0.10  netmask 255.255.255.0  broadcast 172.25.0.255
        inet 127.0.0.1  netmask 255.0.0.0

[root@desktop0 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.25.0.254    0.0.0.0         UG    1024   0        0 eth0
172.25.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@desktop0 ~]# cat   /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@server0 ~]# tail   -10  /etc/sysconfig/network-scripts/ifcfg-eth0 
IPV6INIT=no
PERSISTENT_DHCLIENT=1
IPADDR0=172.25.0.11
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
NAME="System eth0"
UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03

---------  自动生成的配置文件 ifcfg-System_eth0  -----------------

[root@desktop0 ~]# cat  /etc/sysconfig/network-scripts/ifcfg-System_eth0 
TYPE=Ethernet
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME="System eth0"
UUID=6f55a10a-37f9-45f2-9b42-88a62937cce4
DEVICE=eth0
ONBOOT=yes
IPADDR0=172.25.0.10
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes

----------------- 修改 配置文件 名 ifcfg-eth0  ----------------

[root@desktop0 ~]# mv   /etc/sysconfig/network-scripts/ifcfg-{System_eth0,eth0}

[root@desktop0 ~]# cat  /etc/sysconfig/network-scripts/ifcfg-eth0 
TYPE=Ethernet
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME="System eth0"
UUID=6f55a10a-37f9-45f2-9b42-88a62937cce4
DEVICE=eth0
ONBOOT=yes
IPADDR0=172.25.0.10
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes

---------- 网络管理命令行工具NetworkManager command line tool 简称nmcli ---------
---- #nmcli connection reload 刷新配置文件（增加，减少或修改配置文件） ----------------

[root@desktop0 ~]# nmcli   connection  reload  # 重新加载 配置文件
[root@desktop0 ~]# echo  $?
0
[root@desktop0 ~]# ls  /etc/sysconfig/network-scripts/ifcfg-
ifcfg-eth0  ifcfg-lo    

[root@desktop0 ~]# tail    -12  /etc/sysconfig/network-scripts/ifcfg-eth0 
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME="System eth0"
UUID=6f55a10a-37f9-45f2-9b42-88a62937cce4
DEVICE=eth0
ONBOOT=yes
IPADDR0=172.25.0.10
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes
[root@desktop0 ~]# ifconfig  |awk  '/inet /{print $2}'
172.25.0.10
127.0.0.1

[root@desktop0 ~]# route  -n
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
0.0.0.0         172.25.0.254    0.0.0.0         UG    1024   0        0 eth0
172.25.0.0      0.0.0.0         255.255.255.0   U     0      0        0 eth0

[root@desktop0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.0.254
PING 172.25.0.254 (172.25.0.254) 56(84) bytes of data.
64 bytes from 172.25.0.254: icmp_seq=1 ttl=64 time=0.478 ms
64 bytes from 172.25.0.254: icmp_seq=2 ttl=64 time=0.588 ms
..........
[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.254.254
PING 172.25.254.254 (172.25.254.254) 56(84) bytes of data.
64 bytes from 172.25.254.254: icmp_seq=1 ttl=64 time=0.264 ms
64 bytes from 172.25.254.254: icmp_seq=2 ttl=64 time=0.559 ms
..............
[root@desktop0 ~]# ping  -c2  -i0.2  -w1 172.25.0.11
PING 172.25.0.11 (172.25.0.11) 56(84) bytes of data.
64 bytes from 172.25.0.11: icmp_seq=1 ttl=64 time=0.441 ms
64 bytes from 172.25.0.11: icmp_seq=2 ttl=64 time=0.551 ms
.................
[root@desktop0 ~]# reboot

[root@room9pc27 ~]# ssh  -X  172.25.0.10
..............
[root@desktop0 ~]# cat  /etc/hosts
hosts        hosts.allow  hosts.deny 
  
[root@desktop0 ~]# cat  /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

172.25.254.254 classroom.example.com
172.25.254.254 content.example.com

[root@desktop0 ~]# ifconfig  |awk '/inet /{print $2}'
172.25.0.10
127.0.0.1
[root@desktop0 ~]# ip  route  show
default via 172.25.0.254 dev eth0  proto static  metric 1024 
172.25.0.0/24 dev eth0  proto kernel  scope link  src 172.25.0.10 

[root@desktop0 ~]# cat  /etc/resolv.conf 
# Generated by NetworkManager
search example.com
nameserver 172.25.254.254

[root@desktop0 ~]# tail  -10  /etc/sysconfig/network-scripts/ifcfg-eth0 
NAME="System eth0"
UUID=6f55a10a-37f9-45f2-9b42-88a62937cce4
DEVICE=eth0
ONBOOT=yes
IPADDR0=172.25.0.10
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes

[root@desktop0 ~]# ping  -c2  -i0.2  -w1  172.25.254.254
PING 172.25.254.254 (172.25.254.254) 56(84) bytes of data.
64 bytes from 172.25.254.254: icmp_seq=1 ttl=64 time=0.502 ms
64 bytes from 172.25.254.254: icmp_seq=2 ttl=64 time=0.613 ms
.............

[root@desktop0 ~]# ping  -w  --help
Usage: ping [-aAbBdDfhLnOqrRUvV] [-c count] [-i interval] [-I interface]
            [-m mark] [-M pmtudisc_option] [-l preload] [-p pattern] [-Q tos]
            [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp_option]
            [-w deadline] [-W timeout] [hop1 ...] destination

--------- ping  -i  interval	设定间隔几秒发送一个ping包，默认一秒ping一次；
----------- ping  -W timeout	以毫秒为单位设置ping的超时时间；
--------- ping -w  deadline	deadline； 

[root@desktop0 ~]# ping  -c2  -i0.2  -W1  172.25.0.254

PING 172.25.0.254 (172.25.0.254) 56(84) bytes of data.
64 bytes from 172.25.0.254: icmp_seq=1 ttl=64 time=0.520 ms
64 bytes from 172.25.0.254: icmp_seq=2 ttl=64 time=0.569 ms
..............
[root@desktop0 ~]# tail  -10  /etc/sysconfig/network-scripts/ifcfg-eth0 
NAME="System eth0"
UUID=6f55a10a-37f9-45f2-9b42-88a62937cce4
DEVICE=eth0
ONBOOT=yes
IPADDR0=172.25.0.10
PREFIX0=24
GATEWAY0=172.25.0.254
DNS1=172.25.254.254
IPV6_PEERDNS=yes
IPV6_PEERROUTES=yes

========================= -===============================
您必须完成对网络的修改，这样才能访问其余的考题，一旦您完成了上述修改，
点击下面的URL地址：http://rhgls.domain254.example.com/exam/ex200/index2.html

[root@room9pc27 ~]# ls  /var/www/
cgi-bin  exam  html
[root@room9pc27 ~]# ls  /var/www/exam/
ex200  ex300  index.html  rht-ex300.desktop

[root@room9pc27 ~]# find  /etc/   |xargs  grep  -lri  rhgls.domain254.example.com
/etc/hosts
grep: /etc/extlinux.conf: 没有那个文件或目录
/etc/hosts
[root@room9pc27 ~]# cat  /etc/hosts  |grep  rhgls.domain254.example.com
172.25.254.250  foundation0 foundation0.example.com rhgls.domain254.example.com


RHCE7-EX200模拟测试
考试说明,请仔细阅读

为您的系统指定一个默认的软件仓库
调整逻辑卷的大小
创建用户帐户
配置文件/var/tmp/fstab的权限
配置一个 cron 任务
创建一个共享目录
安装内核的升级
绑定到外部验证服务
autofs的配置
配置NTP网络时间客户端
配置一个用户帐户
添加一个swap分区
查找文件
查找一个字符串
创建一个逻辑卷
创建一个归档

===============================

为您的系统指定一个默认的软件仓库

YUM的软件库源为 http://content.example.com/rhel7.0/x86_64/dvd，将此配置为您的系统的默认软件仓库。 

[root@room9pc27 ~]# ssh  -o  StrictHostKeyChecking=no  -X  root@172.25.0.11


[root@server0 ~]# yum-config-manager  --add   http://content.example.com/rhel7.0/x86_64/dvd

已加载插件：langpacks
adding repo from: http://content.example.com/rhel7.0/x86_64/dvd

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1


[root@server0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  rhel_dvd.repo

[root@server0 ~]# vim   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo 
[root@server0 ~]# cat   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1
gpgcheck=0    #手动添加的//不检查软件签名

[root@server0 ~]# mkdir  /etc/yum.repos.d/repo

[root@server0 ~]# mv  /etc/yum.repos.d/rhel_dvd.repo   /etc/yum.repos.d/repo/
/****************
[root@server0 ~]# cat  /etc/yum.repos.d/repo/rhel_dvd.repo 
# Created by cloud-init on Thu, 10 Jul 2014 22:19:11 +0000
[rhel_dvd]
gpgcheck = 0
enabled = 1
baseurl = http://content.example.com/rhel7.0/x86_64/dvd
name = Remote classroom copy of dvd
**************/

[root@server0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  repo

[root@server0 ~]# yum  clean  all  > /dev/null && yum repolist 
已加载插件：langpacks
content.example.com_rhel7.0_x86_64_dvd                                    | 4.1 kB  00:00:00     
(1/2): content.example.com_rhel7.0_x86_64_dvd/group_gz                    | 134 kB  00:00:00     
(2/2): content.example.com_rhel7.0_x86_64_dvd/primary_db                  | 3.4 MB  00:00:00     
源标识                                 源名称                                               状态
content.example.com_rhel7.0_x86_64_dvd added from: http://content.example.com/rhel7.0/x86_6 4,305
repolist: 4,305

/************* yum makecache就是把服务器的包信息下载到本地电脑缓存起来
配合yum -C search xxx使用  #搜索速度快 -C
***********/
/**********************
[root@server0 ~]# yum  makecache  #把服务器的包信息下载到本地电脑缓存起来
已加载插件：langpacks
content.example.com_rhel7.0_x86_64_dvd                                    | 4.1 kB  00:00:00     
(1/3): content.example.com_rhel7.0_x86_64_dvd/other_db                    | 1.3 MB  00:00:00     
(2/3): content.example.com_rhel7.0_x86_64_dvd/filelists_db                | 3.0 MB  00:00:00     
(3/3): content.example.com_rhel7.0_x86_64_dvd/productid                   | 1.6 kB  00:00:00     
元数据缓存已建立
[root@server0 ~]# yum -C  search  httpd #搜索速度快 -C

已加载插件：langpacks
====================================== N/S matched: httpd =======================================
httpd.x86_64 : Apache HTTP Server
httpd-devel.x86_64 : Development interfaces for the Apache HTTP server
httpd-manual.noarch : Documentation for the Apache HTTP server
httpd-tools.x86_64 : Tools for use with the Apache HTTP Server
libmicrohttpd.i686 : Lightweight library for embedding a webserver in applications
libmicrohttpd.x86_64 : Lightweight library for embedding a webserver in applications
mod_dav_svn.x86_64 : Apache httpd module for Subversion server

  名称和简介匹配 only，使用“search all”试试。
[root@server0 ~]# 
***************/


============ desktop0.example.com  ===========

[root@room9pc27 ~]# ssh  -X  172.25.0.10

Last login: Wed Feb 13 12:40:29 2019 from 172.25.0.250

(process:2241): dconf-WARNING **: failed to commit changes to dconf: 无法连接：拒绝连接

[root@desktop0 ~]# ls  /etc/yum.repos.d/
rhel_dvd.repo
[root@desktop0 ~]# mkdir   /etc/yum.repos.d/repo

[root@desktop0 ~]# mv   /etc/yum.repos.d/rhel_dvd.repo    /etc/yum.repos.d/repo/

[root@desktop0 ~]# yum-config-manager   --add  http://content.example.com/rhel7.0/x86_64/dvd
已加载插件：langpacks
adding repo from: http://content.example.com/rhel7.0/x86_64/dvd

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1


[root@desktop0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  repo

[root@desktop0 ~]# vim   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo 
[root@desktop0 ~]# cat   /etc/yum.repos.d/content.example.com_rhel7.0_x86_64_dvd.repo

[content.example.com_rhel7.0_x86_64_dvd]
name=added from: http://content.example.com/rhel7.0/x86_64/dvd
baseurl=http://content.example.com/rhel7.0/x86_64/dvd
enabled=1
gpgcheck=0    #手动添加的//不检查软件签名

[root@desktop0 ~]# yum  clean  all  >/dev/null  &&  yum repolist 

已加载插件：langpacks
content.example.com_rhel7.0_x86_64_dvd                                    | 4.1 kB  00:00:00     
(1/2): content.example.com_rhel7.0_x86_64_dvd/group_gz                    | 134 kB  00:00:00     
(2/2): content.example.com_rhel7.0_x86_64_dvd/primary_db                  | 3.4 MB  00:00:00     
源标识                                 源名称                                               状态
content.example.com_rhel7.0_x86_64_dvd added from: http://content.example.com/rhel7.0/x86_6 4,305
repolist: 4,305

[root@desktop0 ~]# 

==========================

调整逻辑卷的大小
创建用户帐户
配置文件/var/tmp/fstab的权限
配置一个 cron 任务
创建一个共享目录
安装内核的升级
绑定到外部验证服务
autofs的配置
配置NTP网络时间客户端
配置一个用户帐户
添加一个swap分区
查找文件
查找一个字符串
创建一个逻辑卷
创建一个归档

==================================
调整逻辑卷的大小

自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 
/**********   ~]# echo  300+512+800 |bc
1612
 ~]# echo  1024*10/4 |bc
2560
***********/
解题参考:
[练习环境:参考文末的步骤先处理 /dev/vdb ]
[注:此题建议与第 12、15 题综合考虑;如果逻辑卷 vo 所在卷组有足够空间,只要执行最后两步]

12. 添加一个 swap 分区
添加一个swap分区

在您的系统中添加一个大小为 512 MiB 的swap分区：
/*****  ~]# echo  512+800|bc
1312
***********/
当您的系统启动时，swap 分区应该可以自动挂载
不要移除或者修改其他已经存在于您的系统中的 swap 分区

15. 创建一个逻辑卷
创建一个逻辑卷

根据下面的要求创建一个新的逻辑卷：
逻辑卷命名为database，属于datastore卷组，
并且逻辑卷的大小为50个物理扩展单元 (physical extent)
在datastore卷组中的逻辑卷，
物理扩展单元 (physical extent) 大小应为 16 MiB
/**** ~]# echo  50*16|bc
800
*****/
使用ext3文件系统对新的逻辑卷进行格式化，
此逻辑卷应该在系统启动的时候自动挂载在 /mnt/database 目录下
========================================

-------------------------------------------  调整逻辑卷的大小

自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 

/*****************
MSDOS分区
    早期的Linux系统为了兼容Windows的磁盘，
使用支持Windows的MBR的方式来处理开机管理程序与分区表，
这些记录在第一个扇区，这个扇区通常为512bytes大小，
所以第一个扇区会有两个数据
   1、主要启动记录区（MBR）:可以按照开机管理程序的地方，有446bytes
   2、分区表（partition table）:记录整个硬盘分区的状态，有64bytes
由于分区表所在区块仅有64bytes容量，
因此最多仅能有四组记录区，
每组记录区记录了该区段的起始与结束的磁柱号码。
=============
GPT磁盘分区（GUID partition table）
    为了兼容与所有的磁盘，在扇区的定义上面，
大多会使用所谓的逻辑区块地址（LBA）来处理，
GPT将磁盘所有区块以LBA来规划，
而第一个LBA称为LBA0
LBA0（MBR相容区块）
    与MBR模式相似

LBA1（GPT表头记录）
    记录分区本身位置与大小，同时记录了备份用的GPT分区放置位置以及分区表的检验机制码（CRC32）

LBA2-33（实际记录分区信息） 
    从LBA2区块开时，每个LBA都可以记录4笔分区记录，
所以默认情况下可以有4×32=128笔分区记录，
因为每个LBA有512bytes，
因此每个记录用到128bytes的空间，
除了每个记录所需要的标识符和相关记录外，G
PT在每个记录中分别提供64bits来记录开始/结束的扇区号码，
因此，GPT分区表对于单一分区来说，他的最大容量限制就是8ZB。

1TB (Trillionbyte 万亿字节 太字节)=1024GB，其中1024=2^10 ( 2 的10次方)，
1PB（Petabyte 千万亿字节 拍字节）=1024TB，
1EB（Exabyte 百亿亿字节 艾字节）=1024PB，
1ZB (Zettabyte 十万亿亿字节 泽字节)= 1024 EB,
*************/

[root@server0 ~]# fdisk   -l  /dev/vda   //确认现分区表模式

磁盘 /dev/vda：10.7 GB, 10737418240 字节，20971520 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos       #注意 分区表模式dos
磁盘标识符：0x00013f3e

   设备 Boot      Start         End      Blocks   Id  System
/dev/vda1   *        2048    20970332    10484142+  83  Linux

[root@server0 ~]# fdisk   -l  /dev/vdb   # //确认现分区表模式

磁盘 /dev/vdb：10.7 GB, 10737418240 字节，20971520 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节

[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb    253:16   0  10G  0 disk 

-------------------------------------------  调整逻辑卷的大小

自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 

/**********   ~]# echo  300+512+800 |bc
1612
 ~]# echo  1024*10/4 |bc
2560
***********/

[root@server0 ~]# fdisk   /dev/vdb 
欢迎使用 fdisk (util-linux 2.23.2)。

更改将停留在内存中，直到您决定将更改写入磁盘。
使用写入命令前请三思。

Device does not contain a recognized partition table
使用磁盘标识符 0x0a389374 创建新的 DOS 磁盘标签。

命令(输入 m 获取帮助)： m
命令操作
..........
   d   delete a partition
   g   create a new empty GPT partition table
   G   create an IRIX (SGI) partition table
   l   list known partition types
   m   print this menu
   n   add a new partition
   p   print the partition table
   w   write table to disk and exit

命令(输入 m 获取帮助)：p

磁盘 /dev/vdb：10.7 GB, 10737418240 字节，20971520 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0xeb42d35e

   设备 Boot      Start         End      Blocks   Id  System

命令(输入 m 获取帮助)：n         ----------  //新建
Partition type:
   p   primary (0 primary, 0 extended, 4 free)
   e   extended
Select (default p): e        -----------  //扩展分区e
分区号 (1-4，默认 1)：4
起始 扇区 (2048-20971519，默认为 2048)：
将使用默认值 2048
Last 扇区, +扇区 or +size{K,M,G} (2048-20971519，默认为 20971519)：+3G  # 注意参考考试要求,设置总的大小
分区 4 已设置为 Extended 类型，大小设为 3 GiB

命令(输入 m 获取帮助)：p

磁盘 /dev/vdb：10.7 GB, 10737418240 字节，20971520 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0xeb42d35e

   设备 Boot      Start         End      Blocks   Id  System
/dev/vdb4            2048     6293503     3145728    5  Extended
/*********** 自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
************/

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 5
起始 扇区 (4096-6293503，默认为 4096)：  
将使用默认值 4096
Last 扇区, +扇区 or +size{K,M,G} (4096-6293503，默认为 6293503)：+450M
分区 5 已设置为 Linux 类型，大小设为 450 MiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 6
起始 扇区 (927744-6293503，默认为 927744)：
将使用默认值 927744
Last 扇区, +扇区 or +size{K,M,G} (927744-6293503，默认为 6293503)：+512M
分区 6 已设置为 Linux 类型，大小设为 512 MiB

命令(输入 m 获取帮助)：n
Partition type:
   p   primary (0 primary, 1 extended, 3 free)
   l   logical (numbered from 5)
Select (default p): l
添加逻辑分区 7
起始 扇区 (1978368-6293503，默认为 1978368)：
将使用默认值 1978368
Last 扇区, +扇区 or +size{K,M,G} (1978368-6293503，默认为 6293503)：+1G
分区 7 已设置为 Linux 类型，大小设为 1 GiB

命令(输入 m 获取帮助)：w       ------------- #/保存分区更改
The partition table has been altered!

Calling ioctl() to re-read partition table.
正在同步磁盘。
[root@server0 ~]# partprobe   /dev/vdb     #//刷新分区表

[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda    253:0    0   10G  0 disk 
└─vda1 253:1    0   10G  0 part /
vdb    253:16   0   10G  0 disk 
├─vdb4 253:20   0    1K  0 part 
├─vdb5 253:21   0  450M  0 part 
├─vdb6 253:22   0  512M  0 part 
└─vdb7 253:23   0    1G  0 part 

[root@server0 ~]#  reboot        # 强烈建议重启一次
Connection to 172.25.0.11 closed by remote host.
Connection to 172.25.0.11 closed.

[root@room9pc27 ~]# ssh  root@172.25.0.11

[root@server0 ~]# fdisk  -l  /dev/vdb

磁盘 /dev/vdb：10.7 GB, 10737418240 字节，20971520 个扇区
Units = 扇区 of 1 * 512 = 512 bytes
扇区大小(逻辑/物理)：512 字节 / 512 字节
I/O 大小(最小/最佳)：512 字节 / 512 字节
磁盘标签类型：dos
磁盘标识符：0xeb42d35e

   设备 Boot      Start         End      Blocks   Id  System
/dev/vdb4            2048     6293503     3145728    5  Extended
/dev/vdb5            4096      925695      460800   83  Linux
/dev/vdb6          927744     1976319      524288   83  Linux
/dev/vdb7         1978368     4075519     1048576   83  Linux

[root@server0 ~]# lsblk 
NAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda    253:0    0   10G  0 disk 
└─vda1 253:1    0   10G  0 part /
vdb    253:16   0   10G  0 disk 
├─vdb4 253:20   0    1K  0 part 
├─vdb5 253:21   0  450M  0 part 
├─vdb6 253:22   0  512M  0 part 
└─vdb7 253:23   0    1G  0 part 

--------------------------------  调整逻辑卷的大小

自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 

[root@server0 ~]# pvcreate  /dev/vdb5   #创建 物理卷(可以不执行此命令,在创建卷组时会自动创建物理卷)
  Physical volume "/dev/vdb5" successfully created

[root@server0 ~]# pvscan 
  PV /dev/vdb5                      lvm2 [450.00 MiB]
  Total: 1 [450.00 MiB] / in use: 0 [0   ] / in no VG: 1 [450.00 MiB]

[root@server0 ~]# vgcreate   systemvg  /dev/vdb5  #创建卷组

  Volume group "systemvg" successfully created

[root@server0 ~]# vgscan 
  Reading all physical volumes.  This may take a while...
  Found volume group "systemvg" using metadata type lvm2

[root@server0 ~]# vgs         #显示卷组信息
  VG       #PV #LV #SN Attr   VSize   VFree  
  systemvg   1   0   0 wz--n- 448.00m 448.00m

[root@server0 ~]# 

----------  自行建立一个200MiB的逻辑卷 /dev/systemvg/vo，----------

[root@server0 ~]# lvcreate   -L  200M   -n   vo   /dev/systemvg
  Logical volume "vo" created

[root@server0 ~]# lvscan 
  ACTIVE            '/dev/systemvg/vo' [200.00 MiB] inherit

[root@server0 ~]# lv
lvchange     lvextend     lvmdiskscan  lvmsar       lvresize     
lvconvert    lvm          lvmdump      lvreduce     lvs          
lvcreate     lvmchange    lvmetad      lvremove     lvscan       
lvdisplay    lvmconf      lvmsadc      lvrename   
  
[root@server0 ~]# lvs
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 200.00m                                             
[root@server0 ~]# lsblk 
NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT
vda             253:0    0   10G  0 disk 
└─vda1          253:1    0   10G  0 part /
vdb             253:16   0   10G  0 disk 
├─vdb4          253:20   0    1K  0 part 
├─vdb5          253:21   0  450M  0 part 
│ └─systemvg-vo 252:0    0  200M  0 lvm  
├─vdb6          253:22   0  512M  0 part 
└─vdb7          253:23   0    1G  0 part 

------------------  格式化为ext3文件系统并挂载到 /vo  ------------

[root@server0 ~]# mkdir   /vo

[root@server0 ~]# mkfs.ext
mkfs.ext2  mkfs.ext3  mkfs.ext4  

------------------  格式化为ext3文件系统并挂载到 /vo  ------------
------------       -f :强制格式化  -------------

[root@server0 ~]# mkfs.ext4   /dev/systemvg/vo 

mke2fs 1.42.9 (28-Dec-2013)
文件系统标签=
OS type: Linux
.............
[root@server0 ~]# blkid  /dev/systemvg/vo  #查看文件系统 格式化结果

/dev/systemvg/vo: UUID="b5b8e5c5-e969-4bd7-b915-8d4d7eb5d82f" TYPE="ext4" 

[root@server0 ~]# lvs
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 200.00m   
                                          
[root@server0 ~]# vgs
  VG       #PV #LV #SN Attr   VSize   VFree  
  systemvg   1   1   0 wz--n- 448.00m 248.00m

[root@server0 ~]# lvdisplay         #显示逻辑卷信息
  --- Logical volume ---
  LV Path                /dev/systemvg/vo
  LV Name                vo
  VG Name                systemvg
  LV UUID                xGGqGc-pBYI-VkTx-B7jH-cZac-noQ8-TgpIOv
  LV Write Access        read/write
  LV Creation host, time server0.example.com, 2019-02-13 16:01:41 +0800
  LV Status              available
  # open                 0
  LV Size                200.00 MiB
  Current LE             50
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     8192
  Block device           252:0
   
[root@server0 ~]# lvscan 
  ACTIVE            '/dev/systemvg/vo' [200.00 MiB] inherit

[root@server0 ~]# mount  /dev/systemvg/vo   /vo/
[root@server0 ~]# echo  hehehead >  /vo/head.txt
[root@server0 ~]# umount  /dev/systemvg/vo 

格式化为ext3文件系统并挂载到 /vo 。
然后将逻辑卷vo和其文件系统大小调整到 300 MiB。要确保文件系统中的内容保持完整。
请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。 

---------------------  注意如果 卷组空间不够,需要执行以下命令 vgextend 扩展卷组
-------------------  本实验 卷组足够,不需要执行此命令 --------------------

/*** [root@server0 ~]# vgextend   systemvg   /dev/vdb5   #扩展卷组

  Physical volume '/dev/vdb5' is already in volume group 'systemvg'
  Unable to add physical volume '/dev/vdb5' to volume group 'systemvg'
物理卷“/dev/vdb5”已在卷组“systemvg”中
无法将物理卷“/dev/vdb5”添加到卷组“systemvg”
*************/
/************ 将逻辑卷vo和其文件系统大小调整到 300 MiB.
 请注意：分区大小很少能够完全符合要求的大小，
所以大小在 270 MiB 和 330 MiB 之间都是可以接受的。
****/

[root@server0 ~]# lvextend   -L  315MiB  /dev/systemvg/vo  # 扩展逻辑卷空间

  Rounding size to boundary between physical extents: 316.00 MiB
  Extending logical volume vo to 316.00 MiB
  Logical volume vo successfully resized

[root@server0 ~]# lvscan 
  ACTIVE            '/dev/systemvg/vo' [316.00 MiB] inherit
[root@server0 ~]# lvs
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 316.00m   

------------ 将逻辑卷vo和其文件系统大小调整到 300 MiB  //更新逻辑卷大小-------------
文件系统的扩展
   resize2fs : ext4文件系统扩展命令
   xfs_growfs : xfs文件系统扩展命令

[root@server0 ~]# resize2fs   /dev/systemvg/vo  #刷新文件系统ext4(刷新扩展文件系统)

resize2fs 1.42.9 (28-Dec-2013)
Resizing the filesystem on /dev/systemvg/vo to 323584 (1k) blocks.
The filesystem on /dev/systemvg/vo is now 323584 blocks long.


[root@server0 ~]# lvs
  LV   VG       Attr       LSize   Pool Origin Data%  Move Log Cpy%Sync Convert
  vo   systemvg -wi-a----- 316.00m                                             
[root@server0 ~]# vgs
  VG       #PV #LV #SN Attr   VSize   VFree  
  systemvg   1   1   0 wz--n- 448.00m 132.00m

[root@server0 ~]# mount  /dev/systemvg/vo   /vo/

[root@server0 ~]# df  -hT   /vo/
文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext4  302M  2.1M  281M    1% /vo

[root@server0 ~]# ls  /vo/
lost+found
[root@server0 ~]# umount  /dev/systemvg/vo   #卸载
[root@server0 ~]# ls  /vo/

[root@server0 ~]# blkid  /dev/systemvg/vo
/dev/systemvg/vo: UUID="b5b8e5c5-e969-4bd7-b915-8d4d7eb5d82f" TYPE="ext4" 

[root@server0 ~]# df  -hT  /
文件系统       类型  容量  已用  可用 已用% 挂载点
/dev/vda1      xfs    10G  3.1G  7.0G   31% /

[root@server0 ~]# blkid  /dev/vda1    #  #查看分区UUID及文件系统信息
/dev/vda1: UUID="9bf6b9f7-92ad-441b-848e-0257cbb883d1" TYPE="xfs" 

-------------------  完成开机自动挂载  -------------------

[root@server0 ~]# vim  /etc/fstab    # 开机自动挂载

[root@server0 ~]# tail  -2   /etc/fstab
UUID=9bf6b9f7-92ad-441b-848e-0257cbb883d1  /    xfs   defaults   1   1
/dev/systemvg/vo   /vo      ext4          defaults   0    0
设备路径              挂载点  此分区的文件系统类型  参数     备份标记  检测顺序

第一列可以是实际分区名/dev/systemvg/vo， 也可以是实际分区的卷标（Lable）

第三列为此分区的文件系统类型。
Linux可以使用ext2、ext3等类型，此字段须与分区格式化时使用的类型相同。
也可以使用 auto 这一特殊的语法，使系统自动侦测目标分区的分区类型。
auto通常用于可移动设备的挂载

第四列是挂载的选项，用于设置挂载的参数。
常见参数如下：
auto: 系统自动挂载，fstab默认就是这个选项
defaults: rw, suid, dev, exec, auto, nouser, and async.
noauto 开机不自动挂载
nouser 只有超级用户可以挂载
ro 按只读权限挂载
rw 按可读可写权限挂载
user 任何用户都可以挂载
请注意光驱和软驱只有在装有介质时才可以进行挂载，因此它是noauto

第五列是dump备份设置。
当其值设置 为  1  时，
将允许dump备份程序备份；
设置 为  0  时，忽略备份操作；

第六列是fsck磁盘检查设置。
其值是一个顺序。 当其值为0时，永远不检查；
而 / 根目录分区永远都为1。
其它分区从2开始，
数字越小 优先 检查，
如果两个分区的数字相同，则同时检查。

[root@server0 ~]# mount   -a   #自动挂载
[root@server0 ~]# ls  /vo/
lost+found
[root@server0 ~]# echo  hahaend  >  /vo/end.txt
[root@server0 ~]# cat   /vo/end.txt
hahaend

[root@server0 ~]# df  -hT  /vo/   ##查看所有 正在挂载使用  的分区的信息

文件系统                类型  容量  已用  可用 已用% 挂载点
/dev/mapper/systemvg-vo ext4  302M  2.1M  281M    1% /vo

==================================

--------------------------  3 创建用户帐户 --------------------

创建下列用户、组以及和组的成员关系：
一个名为adminuser的组
一个名为natasha的用户，其属于adminuser，这个组是该用户的从属组
一个名为harry的用户，属于adminuser，这个组是该用户的从属组
一个名为sarah的用户，其在系统中没有可交互的shell，并且不是adminuser组的成员用户
natasha、harry、和sarah的密码都要设置为flectrag

[root@server0 ~]# groupadd   adminuser  #创建组名

[root@server0 ~]# tail  -1  /etc/group
adminuser:x:1001:

创建用户 一个名为natasha的用户，其属于adminuser，这个组是该用户的从属组

[root@server0 ~]# useradd   -G  adminuser  natasha
[root@server0 ~]# id   natasha
uid=1001(natasha) gid=1002(natasha) 组=1002(natasha),1001(adminuser)

/*************
[root@V10 ~]# groupadd  -g  2009  testzu
[root@V10 ~]# grep    testzu   /etc/group
testzu:x:2009:
[root@V10 ~]# useradd  -u  2009  -g  2009  -G  testzu testman
[root@V10 ~]# id  testman
uid=2009(testman) gid=2009(testzu) 组=2009(testzu)
[root@V10 ~]# grep  -n  testman  /etc/passwd
41:testman:x:2009:2009::/home/testman:/bin/bash

[root@V10 ~]# grep   testzu  /etc/group
testzu:x:2009:testman

Linux groupdel命令用于删除群组。
groupdel [群组名称]
警告
如果有任何一个群组的使用者在线上的话就不能移除该群组。
最好先移除使用者后再移除群组
[root@V10 ~]# userdel   -r   testman 
[root@V10 ~]# groupdel    testzu 
[root@V10 ~]# grep   testzu  /etc/group
************/

创建用户 一个名为harry的用户，属于adminuser，这个组是该用户的从属组

[root@server0 ~]# useradd  -G  adminuser  harry

[root@server0 ~]# tail  -2  /etc/passwd
natasha:x:1001:1002::/home/natasha:/bin/bash
harry:x:1002:1003::/home/harry:/bin/bash

[root@server0 ~]# tail  -3  /etc/group
adminuser:x:1001:natasha,harry
natasha:x:1002:
harry:x:1003:

创建用户一个名为sarah的用户，其在系统中没有可交互的shell，并且不是adminuser组的成员用户

[root@server0 ~]# useradd   -s  /sbin/nologin  sarah

[root@server0 ~]# id  sarah
uid=1003(sarah) gid=1004(sarah) 组=1004(sarah)

[root@server0 ~]# grep  -n sarah   /etc/passwd  #在系统中没有可交互的shell
42:sarah:x:1003:1004::/home/sarah:/sbin/nologin

---------- natasha、harry、和sarah的密码都要设置为flectrag ----------
for  i  in  natasha  harry  sarah; do
echo   flectrag  |passwd  --stdin  ${i};done

[root@server0 ~]# for  i  in  natasha  harry  sarah; do
> echo   flectrag  |passwd  --stdin  ${i};done

更改用户 natasha 的密码 。
passwd：所有的身份验证令牌已经成功更新。
更改用户 harry 的密码 。
passwd：所有的身份验证令牌已经成功更新。
更改用户 sarah 的密码 。
passwd：所有的身份验证令牌已经成功更新。

=================================
----------------  4 配置文件/var/tmp/fstab的权限

拷贝文件/etc/fstab到/var/tmp/fstab，配置文件/var/tmp/fstab的权限：
文件/var/tmp/fstab的拥有者是root用户
文件/var/tmp/fstab属于root组
文件/var/tmp/fstab对任何人都不可执行
用户natasha能够对文件/var/tmp/fstab执行读和写操作
用户harry 对文件/var/tmp/fstab既不能读，也不能写
所有其他用户（当前的和将来的）能够对文件/var/tmp/fstab进行读操作

[root@server0 ~]# ll  /etc/fstab 
-rw-r--r--. 1 root root 348 2月  13 16:49 /etc/fstab

[root@server0 ~]# cp  /etc/fstab   /var/tmp/

[root@server0 ~]# ll /var/tmp/fstab 
-rw-r--r--. 1 root root 348 2月  13 17:50 /var/tmp/fstab

用户natasha能够对文件/var/tmp/fstab执行读和写操作
用户harry 对文件/var/tmp/fstab既不能读，也不能写
所有其他用户（当前的和将来的）能够对文件/var/tmp/fstab进行读操作

[root@server0 ~]# setfacl   -m  u:natasha:rw  /var/tmp/fstab
[root@server0 ~]# setfacl  -m   u:harry:-   /var/tmp/fstab

[root@server0 ~]# ll   /var/tmp/fstab
-rw-rw-r--+ 1 root root 348 2月  13 17:50 /var/tmp/fstab

[root@server0 ~]# getfacl   /var/tmp/fstab

getfacl: Removing leading '/' from absolute path names
# file: var/tmp/fstab
# owner: root
# group: root
user::rw-
user:natasha:rw-
user:harry:---
group::r--
mask::rw-
other::r--

[root@server0 ~]# 

======================================
-----------------  5 配置一个cron任务

为用户natasha配置一个定时任务，每天在本地时间14:23时执行命令 /bin/echo hiya 


[root@server0 ~]# systemctl  is-active   crond
active
[root@server0 ~]# systemctl  is-enabled   crond
enabled
[root@server0 ~]# rpm  -q  cronie  crontabs
cronie-1.4.11-11.el7.x86_64
crontabs-1.11-6.20121102git.el7.noarch

[root@server0 ~]# rpm  -ql  crontabs
/etc/cron.daily
/etc/cron.hourly
/etc/cron.monthly
/etc/cron.weekly
/etc/crontab
.............

[root@server0 ~]# rpm  -ql  cronie
.............
/var/spool/cron

[root@server0 ~]# which crontab 
/usr/bin/crontab
[root@server0 ~]# ll  /usr/bin/crontab  #文件有 set gid属性
-rwsr-xr-x. 1 root root 57536 1月  28 2014 /usr/bin/crontab
/************
[root@V10 ~]# ll  test.txt 
-rw-r--r-- 1 root root 15 2月  12 18:09 test.txt

[root@V10 ~]# chmod  u+s  test.txt   #set gid 注意 无 x 执行权限 S
[root@V10 ~]# ll  test.txt
-rwSr--r-- 1 root root 15 2月  12 18:09 test.txt

[root@V10 ~]# ll  test2.txt
-rwxr-xr-x 1 root root 15 2月  12 18:36 test2.txt

[root@V10 ~]# chmod  4755  test2.txt #set gid 注意 有 x 执行权限s
[root@V10 ~]# ll  test2.txt
-rwsr-xr-x 1 root root 15 2月  12 18:36 test2.txt
************/


为用户natasha配置一个定时任务，每天在本地时间14:23时执行命令 /bin/echo hiya 

[root@server0 ~]# crontab   -e  -u natasha
no crontab for natasha - using an empty one
crontab: installing new crontab

-----------   .查看调度任务 ---------------
[root@server0 ~]# crontab   -l  -u  natasha #列出当前的所有natasha用户的调度任务
23 14  *  *  * /bin/echo  hiya

[root@server0 ~]# ll   /bin/echo
-rwxr-xr-x. 1 root root 33040 1月  25 2014 /bin/echo

[root@server0 ~]# systemctl  restart   crond.service ##重启 计划任务 服务

----------   .查看调度任务 ---------------
[root@server0 ~]# crontab   -l
no crontab for root

----------   .查看调度任务 ---------------
[root@server0 ~]# crontab   -l  -u natasha
23 14  *  *  * /bin/echo  hiya


[root@server0 ~]# ls  /var/spool/cron/natasha 
/var/spool/cron/natasha
- -- ----------   .查看调度任务 -------------

[root@server0 ~]# cat  /var/spool/cron/natasha
23 14  *  *  * /bin/echo  hiya

/************************************

[root@desktop0 ~]# crontab   -e  
............
[root@desktop0 ~]# crontab   -l
* * * * *  /usr/bin/echo  hello boy

[root@desktop0 ~]# which  echo
/usr/bin/echo
[root@desktop0 ~]# cat  /var/spool/cron/root 
* * * * *  /usr/bin/echo  hello boy

[root@desktop0 ~]# systemctl  restart  crond.service 

[root@desktop0 ~]# ll  /var/spool/mail/root 
-rw-------. 1 root mail 2565 2月  13 18:39 /var/spool/mail/root
您在 /var/spool/mail/root 中有新邮件

[root@desktop0 ~]# tail  -2 /var/spool/mail/root
hello boy

[root@desktop0 ~]# crontab   -r  -u root  #删除 root用户的定时计划任务
[root@desktop0 ~]# crontab   -l
no crontab for root

[root@desktop0 ~]# ls  /var/spool/mail/
root  rpc  student
[root@desktop0 ~]# ls  /var/spool/cron/
******************/


===========================
--------------- 6 创建一个共享目录

创建一个共享目录/home/admins ，特性如下：
/home/admins目录的组所有权是adminuser
adminuser组的成员对目录有读写和执行的权限。
除此之外的其他所有用户没有任何权限（root用户能够访问系统中的所有文件和目录）

在/home/admins目录中创建的文件，其组所有权会自动设置为属于adminuser组

[注]此处所谓的共享目录并不是指网络共享，只是某个组成员共用

[root@server0 ~]# grep  -n  adminuser  /etc/group
64:adminuser:x:1001:natasha,harry

 --------------- 使用了 Set Gid 属性  suid=4  sgid=2  Sticky bit=1 ---------

[root@server0 ~]# mkdir  -m  2770  /home/admins

[root@server0 ~]# ls  -ld  /home/admins/
drwxrws---. 2 root root 6 2月  13 18:54 /home/admins/

--------- adminuser组的成员对目录/home/admins/有读写和执行的权限 --------------

[root@server0 ~]# chown   root.adminuser  /home/admins/

/*****************或者 也可以这样chown  :adminuser 
[root@server0 ~]# chown  :adminuser  /home/admins/
*****************/

[root@server0 ~]# ls  -ld  /home/admins/
drwxrws---. 2 root adminuser 6 2月  13 18:54 /home/admins/

[root@server0 ~]# 

=============================
----------------- 7 安装内核的升级

从指定的地址 
http://classroom.example.com/content/rhel7.0/x86_64/errata/Pa ckages/ 
找到新版kernel的rpm安装文件，
下载并用来升级内核，
同时要满足下列要求：
当系统重新启动之后升级的内核要作为默认的内核
原来的内核要被保留，并且仍然可以正常启动

[root@server0 ~]# uname    -r  #查看版本//确认内核版本
3.10.0-123.el7.x86_64

[root@server0 ~]# cat /proc/version   # 查看版本
Linux version 3.10.0-123.el7.x86_64 (mockbuild@x86-017.build.eng.bos.redhat.com) (gcc version 4.8.2 20140120 (Red Hat 4.8.2-16) (GCC) ) 
#1 SMP Mon May 5 11:16:57 EDT 2014

[root@server0 ~]# uname  -a  # 查看内核/操作系统/CPU信息的linux系统信息命令
Linux server0.example.com 3.10.0-123.el7.x86_64 
#1 SMP Mon May 5 11:16:57 EDT 2014 x86_64 x86_64 x86_64 GNU/Linux

从指定的地址 
http://classroom.example.com/content/rhel7.0/x86_64/errata/Pa ckages/ 
找到新版kernel的rpm安装文件

http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/

Index of /content/rhel7.0/x86_64/errata/Packages
[ICO]	Name	Last modified	Size	Description
[PARENTDIR]	Parent Directory 	 	- 	 
[ ]	kernel-3.10.0-123.1...>	2018-11-27 05:39 	29M	----右键复制链接地址 
[ ]	kernel-doc-3.10.0-12..>	2018-11-27 05:39 	12M	 
[ ]	rht-system-1.0.0-2.e..>	2018-11-27 05:39 	3.9K	 


------------------ 下载 找到新版kernel的rpm安装文件 ----------------------------

[root@server0 ~]# wget   http://classroom.example.com/content/rhel7.0/x86_64/errata/Packages/kernel-3.10.0-123.1.2.el7.x86_64.rpm

............
100%[=========================================>] 30,266,784   105MB/s 用时 0.3s   

2019-02-13 19:21:18 (105 MB/s) - 已保存 “kernel-3.10.0-123.1.2.el7.x86_64.rpm” [30266784/30266784])

[root@server0 ~]# ll  kernel-3.10.0-123.1.2.el7.x86_64.rpm 
-rw-r--r--. 1 root root 30266784 11月 27 18:39 kernel-3.10.0-123.1.2.el7.x86_64.rpm

/******************
rpm 常用命令
1.安装一个包 
# rpm -ivh 
使用 -i 参数安装RPM 包。
使用这个参数 i 安装内核 RPM。
这种情况下，为了防止新的内核无法启动，您需要暂时保留原内核
注意 -v 参数会列出详细的安装信息，
-h 参数会显示安装进度,以"#"号显示安装进度

2.升级一个包 
# rpm -Uvh   #RPM包有升级机制（Upgrade）, 使用-U 参数
1. 使用-U 进行升级新的rpm包的version一定要大于现有的version号，否则不能升级
-U 用来升级 RPM 包，但是如果这个 RPM 包不在 RPM 数据库，则它会安装该包

RPM的数据库
数据库文件位于：/var/lib/rpm
[root@desktop0 ~]# file   /var/lib/rpm/Packages
/var/lib/rpm/Packages: Berkeley DB (Hash, version 9, native byte-order)
[root@desktop0 ~]# file   /var/lib/rpm/Name
/var/lib/rpm/Name: Berkeley DB (Btree, version 9, native byte-order)

3.卸载一个包 
# rpm -e 
-e：卸载指定包名

-V：对RPM包进行验证

4.安装参数 
--force 即使覆盖属于其它包的文件也强迫安装 
--force 忽略软件包及文件的冲突 
--nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装
--nodeps 不检查依赖性关系 
--prefix 将软件包安装到由 指定的路径下 

6.得到被安装的包的信息 
# rpm -qi < rpm package name> 

7.列出该包中有哪些文件 
# rpm -ql < rpm package name> 

8.列出服务器上的一个文件属于哪一个RPM包 
#rpm -qf 

校验RPM包
命令格式：rpm -V 包名
对已经安装的软件，进行校验。
所谓“完整性”，
这里就是指安装rpm包产生的所有文件和原始rpm包中的信息是否一致。
如果完全一致，则不做任何输出，
只有发现有不正确的文件时才会输出
******************/

[root@server0 ~]# uname    -r  #查看版本//确认内核版本
3.10.0-123.el7.x86_64

[root@server0 ~]# rpm   -qa  |grep   "3.10.0-123.el7.x86_64"
kernel-tools-libs-3.10.0-123.el7.x86_64
kernel-3.10.0-123.el7.x86_64
kernel-tools-3.10.0-123.el7.x86_64

-------------- 检查RPM的完整性——rpm -V ----------------

[root@server0 ~]# rpm  -V  kernel-3.10.0-123.el7.x86_64
.......T.    /lib/modules/3.10.0-123.el7.x86_64/modules.devname
.......T.    /lib/modules/3.10.0-123.el7.x86_64/modules.softdep
#  T 表示文件的修改时间不一致；

[root@server0 ~]# ll  kernel-3.10.0-123.1.2.el7.x86_64.rpm 
-rw-r--r--. 1 root root 30266784 11月 27 18:39 kernel-3.10.0-123.1.2.el7.x86_64.rpm
1.安装一个包 
# rpm -ivh 
使用 -i 参数安装RPM 包。
使用这个参数 i 安装内核 RPM。
这种情况下，为了防止新的内核无法启动，您需要暂时保留原内核
注意 -v 参数会列出详细的安装信息，
-h 参数会显示安装进度,以"#"号显示安装进度

[root@server0 ~]# rpm   -ivh   kernel-3.10.0-123.1.2.el7.x86_64.rpm

警告：kernel-3.10.0-123.1.2.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID fd431d51: NOKEY
准备中...                          ################################# [100%]
正在升级/安装...
   1:kernel-3.10.0-123.1.2.el7        ################################# [100%]

[root@server0 ~]# rpm  -V  kernel-3.10.0-123.el7.x86_64
.......T.    /lib/modules/3.10.0-123.el7.x86_64/modules.devname
.......T.    /lib/modules/3.10.0-123.el7.x86_64/modules.softdep
#  T 表示文件的修改时间不一致；
[root@server0 ~]# uname    -r  #查看版本//确认内核版本
3.10.0-123.el7.x86_64

[root@server0 ~]# reboot   #重启以使新内核生效

[root@room9pc27 ~]# ssh  root@172.25.0.11
Last login: Wed Feb 13 15:47:12 2019 from 172.25.0.250

[root@server0 ~]# uname   -r   # 确认新内核版本已经改变
3.10.0-123.1.2.el7.x86_64

-------- 检查RPM的完整性——rpm -V ---------------

[root@server0 ~]# rpm  -V  kernel-3.10.0-123.1.2.el7.x86_64
.......T.    /lib/modules/3.10.0-123.1.2.el7.x86_64/modules.devname
.......T.    /lib/modules/3.10.0-123.1.2.el7.x86_64/modules.softdep

==================================
---------------- 8 绑定到外部验证服务

系统 classroom.example.com 提供了一个 LDAP 验证服务。
您的系统需要按照以下要求绑定到这个服务上：
验证服务器的基本 DN 是：dc=example,dc=com
帐户信息和验证信息都是由 LDAP 提供的
连接要使用证书进行加密，
证书可以在下面的链接中下载 ：http://classroom.example.com/pub/example-ca.crt
当正确完成配置后，
用户 ldapuser0 应该能够登录到您的系统中，但是没有主目录。
当您完成 autofs的题目之后，才能生成主目录
用户ldapuser0的密码是password

[root@server0 ~]# ls  /etc/yum.repos.d/
content.example.com_rhel7.0_x86_64_dvd.repo  repo
[root@server0 ~]# yum repolist  |tail  -3
源标识                                  源名称                             状态
!content.example.com_rhel7.0_x86_64_dvd added from: http://content.example 4,305
repolist: 4,305

--------------------------------- 安装 sssd 软件包 与 LDAP 服务器沟通 ----------------------

[root@server0 ~]# yum   -y  install   sssd
.........
  sssd-krb5-common.x86_64 0:1.11.2-65.el7    sssd-ldap.x86_64 0:1.11.2-65.el7          
  sssd-proxy.x86_64 0:1.11.2-65.el7         

完毕！
[root@server0 ~]# rpm   -q  sssd
sssd-1.11.2-65.el7.x86_64

[root@server0 ~]# which   authconfig-tui 
/usr/sbin/authconfig-tui
[root@server0 ~]# type   authconfig-tui
authconfig-tui 是 /usr/sbin/authconfig-tui

[root@server0 ~]# authconfig-tui   #使用简易配置工具

authconfig-tui - (c) │                                         │ 
                     │  用户信息           认证                                │ 
                     │  [ ] 缓存信息       [ ] 使用 MD5 密码                    │ 
                     │  [*] 使用 LDAP      [*] 使用 shadow 密码            │ 
                     │  [ ] 使用 NIS       [*] 使用 LDAP 认证               │ 
                     │  [ ] 使用 IPAv2     [ ] 使用 Kerberos             │ 
                     │  [ ] 使用 Winbind   [*] 使用指纹读取器                 │ 
                     │                     [ ] 使用 Winbind 认证                │ 
                     │                     [*] 本地授权即可                       │ 
                     │                                                            │ 
                     │      ┌──────┐            ┌────────┐    │ 
                     │      │ 取消        │           │ 下一步   (点击) │    │ 
                     │      └──────┘            └────────┘    │ 

              ┌───────────────────┤ LDAP 设置 ├────────────┐
                 │                                                                   │ 
                 │           [*] 使用 TLS                                  │ 
                 │  服务器： classroom.example.com___________________   │---指定服务器主机名
                 │ 基础 DN： dc=example,dc=com_______________________   │---指定服务端域名
                 │                                                                   │ 
                 │         ┌──────┐                 ┌──────┐       │ 
                 │         │ 后退       │                  │ 确定 (点击)│       │ 
                 │         └──────┘                 └──────┘       │ 
                 │                                                                   │ 
                 │                                                                   │ 
                 └───────────────────────────────┘ 

                 ┌─────────────┤ 警告 ├─────────────┐
                 │                                                                  │ 
                 │ 要连到启用 TLS 的 LDAP                             ↑ │ 
                 │ 服务器，您需要一个签署您服务器证书的 CA                ▮ │ 
                 │                                                                  │ 
                 │                     ┌──────┐                             │ 
                 │                     │ 确定       │                           │ 
                 │                     └──────┘                            │ 
                 │                                                                  │ 
                 └───────────────────────────────┘ 

提示下载证书到 /etc/openldap/cacerts 目录时,另开一终端执行:

[root@room9pc27 ~]# ssh  -X  172.25.0.11
Last login: Wed Feb 13 19:57:53 2019 from 172.25.0.250
[root@server0 ~]# ls  /etc/openldap/
certs  ldap.conf
[root@server0 ~]# ls  /etc/openldap/certs/

[root@server0 ~]# cat  /etc/openldap/ldap.conf 
#
# LDAP Defaults
#
# See ldap.conf(5) for details
# This file should be world readable but not world writable.

#BASE	dc=example,dc=com
#URI	ldap://ldap.example.com ldap://ldap-master.example.com:666

#SIZELIMIT	12
#TIMELIMIT	15
#DEREF		never

TLS_CACERTDIR	/etc/openldap/certs

# Turning this off breaks GSSAPI used with krb5 when rdns = false
SASL_NOCANON	on

[root@server0 ~]# ls  /etc/openldap/
certs  ldap.conf

[root@server0 ~]# ls  /etc/openldap/
cacerts  certs  ldap.conf

[root@server0 ~]# ls  -ld  /etc/openldap/cacerts/
drwxr-xr-x. 2 root root 6 2月  13 20:51 /etc/openldap/cacerts/

[root@server0 ~]# cd  /etc/openldap/cacerts/
[root@server0 cacerts]# ls
连接要使用证书进行加密，
证书可以在下面的链接中下载 ：http://classroom.example.com/pub/example-ca.crt 

[root@server0 cacerts]# wget   http://classroom.example.com/pub/example-ca.crt

--2019-02-13 20:57:25--  http://classroom.example.com/pub/example-ca.crt
正在解析主机 classroom.example.com (classroom.example.com)... 172.25.254.254
正在连接 classroom.example.com (classroom.example.com)|172.25.254.254|:80... 已连接。
已发出 HTTP 请求，正在等待回应... 200 OK
长度：1220 (1.2K)
正在保存至: “example-ca.crt”

100%[======================================>] 1,220       --.-K/s 用时 0s      

2019-02-13 20:57:25 (123 MB/s) - 已保存 “example-ca.crt” [1220/1220])

[root@server0 cacerts]# ls
example-ca.crt
[root@server0 cacerts]# ll  example-ca.crt 
-rw-r--r--. 1 root root 1220 7月  11 2014 example-ca.crt
[root@server0 cacerts]# 

[root@server0 cacerts]# file   example-ca.crt
example-ca.crt: PEM certificate

[root@server0 cacerts]# cat   example-ca.crt
-----BEGIN CERTIFICATE-----
MIIDWTCCAsKgAwIBAgIJAJ..........
............
y6xbFLj/ju/WC+l3wDXBtNXq3nFZvF12n6VVw9WjIN8SrdYq0bWcFNF9TRdb
-----END CERTIFICATE-----

[root@server0 cacerts]# tail  -1  example-ca.crt
-----END CERTIFICATE-----
-----------------------  然后回到 authconfig-tui 工具确认,稍等片刻即可。 -------------------

                 ┌─────────────┤ 警告 ├─────────────┐
                 │                                                                  │ 
                 │ 要连到启用 TLS 的 LDAP                             ↑ │ 
                 │ 服务器，您需要一个签署您服务器证书的 CA                ▮ │ 
                 │                                                                  │ 
                 │                     ┌──────┐                            │ 
                 │                     │ 确定  (点击)│                           │ 
                 │                     └──────┘                            │ 
                 │                                                                  │ 
                 └───────────────────────────────┘ 

要连到启用 TLS 的 LDAP                           ↑ │ 
服务器，您需要一个签署您服务器证书的 CA 
 证书。将此PEM                               
 格式的证书复制到“/etc/openldap/cacerts”目录中。⏎ ▮ │                                               
 然后按“确定”。 

[root@server0 ~]# cd   /etc/openldap/cacerts/
[root@server0 cacerts]# ls
example-ca.crt

/*************-------------- #使用简易配置工具  正在配置中 ----------------------
[root@server0 ~]# authconfig-tui  #按 回车键 配置自动完成需要时间,耐心等待
***************/

[root@server0 ~]# ls  /etc/openldap/
cacerts  certs  ldap.conf
[root@server0 ~]# ls  /etc/openldap/certs/
[root@server0 ~]# ls  /etc/openldap/cacerts/
d5912a02.0  example-ca.crt

[root@server0 ~]# file   /etc/openldap/cacerts/d5912a02.0 
/etc/openldap/cacerts/d5912a02.0: symbolic link to `example-ca.crt'

[root@server0 ~]# head   -1   /etc/openldap/cacerts/d5912a02.0
-----BEGIN CERTIFICATE-----

[root@server0 ~]# ll  /etc/openldap/cacerts/d5912a02.0
lrwxrwxrwx. 1 root root 14 2月  13 21:13 /etc/openldap/cacerts/d5912a02.0 -> example-ca.crt

[root@server0 ~]# ll  /etc/openldap/cacerts/example-ca.crt 
-rw-r--r--. 1 root root 1220 7月  11 2014 /etc/openldap/cacerts/example-ca.crt

[root@server0 ~]# systemctl  restart  sssd.service 
[root@server0 ~]# systemctl   enable   sshd.socket 
ln -s '/usr/lib/systemd/system/sshd.socket' '/etc/systemd/system/sockets.target.wants/sshd.socket'

[root@server0 ~]# ls  /home/
admins  harry  natasha  sarah  student

[root@server0 ~]# id  ldapuser0
uid=1700(ldapuser0) gid=1700(ldapuser0) 组=1700(ldapuser0)

[root@server0 ~]# id  admins
id: admins: no such user

[root@server0 ~]# id   harry 
uid=1002(harry) gid=1003(harry) 组=1003(harry),1001(adminuser)
[root@server0 ~]# id    natasha
uid=1001(natasha) gid=1002(natasha) 组=1002(natasha),1001(adminuser)
[root@server0 ~]# id    sarah
uid=1003(sarah) gid=1004(sarah) 组=1004(sarah)


















